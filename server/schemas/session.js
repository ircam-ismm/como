"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  name: {
    type: 'string',
    default: ''
  },
  id: {
    type: 'string',
    default: ''
  },
  audioFiles: {
    type: 'any',
    default: []
  },
  labels: {
    type: 'any',
    default: []
  },
  labelAudioFileTable: {
    type: 'any',
    default: []
  },
  graph: {
    type: 'any',
    default: {}
  },
  // these two are not persisted as is, they are mixed in the "graph"
  // @todo - document this behavior, this is hard to understand
  graphOptions: {
    type: 'any',
    default: {}
  },
  graphOptionsEvent: {
    type: 'any',
    default: {},
    event: true
  },
  // this should belong to the "encoder / decoder"
  // this needs to be discussed further... what would be clean
  // architecture / strategy for that, e.g.
  // - we don't want to dispatch the examples everywhere,
  // - how to attach an example to a particular encoder / decoder instance,
  // - same for config, etc.
  //
  // @see also `player` schema
  model: {
    type: 'any',
    default: null,
    nullable: true
  },
  examples: {
    type: 'any',
    default: {}
  },
  learningConfig: {
    type: 'any',
    // posture default for now...
    default: {
      target: {
        name: 'xmm'
      },
      payload: {
        modelType: 'hhmm',
        gaussians: 1,
        absoluteRegularization: 0.01,
        relativeRegularization: 0.01,
        covarianceMode: 'full',
        hierarchical: true,
        states: 4,
        transitionMode: 'leftright',
        regressionEstimator: 'full',
        likelihoodWindow: 10
      }
    }
  } // ...

};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXIvc2NoZW1hcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbIm5hbWUiLCJ0eXBlIiwiZGVmYXVsdCIsImlkIiwiYXVkaW9GaWxlcyIsImxhYmVscyIsImxhYmVsQXVkaW9GaWxlVGFibGUiLCJncmFwaCIsImdyYXBoT3B0aW9ucyIsImdyYXBoT3B0aW9uc0V2ZW50IiwiZXZlbnQiLCJtb2RlbCIsIm51bGxhYmxlIiwiZXhhbXBsZXMiLCJsZWFybmluZ0NvbmZpZyIsInRhcmdldCIsInBheWxvYWQiLCJtb2RlbFR5cGUiLCJnYXVzc2lhbnMiLCJhYnNvbHV0ZVJlZ3VsYXJpemF0aW9uIiwicmVsYXRpdmVSZWd1bGFyaXphdGlvbiIsImNvdmFyaWFuY2VNb2RlIiwiaGllcmFyY2hpY2FsIiwic3RhdGVzIiwidHJhbnNpdGlvbk1vZGUiLCJyZWdyZXNzaW9uRXN0aW1hdG9yIiwibGlrZWxpaG9vZFdpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2VBQWU7QUFDYkEsRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLElBQUksRUFBRSxRQURGO0FBRUpDLElBQUFBLE9BQU8sRUFBRTtBQUZMLEdBRE87QUFLYkMsRUFBQUEsRUFBRSxFQUFFO0FBQ0ZGLElBQUFBLElBQUksRUFBRSxRQURKO0FBRUZDLElBQUFBLE9BQU8sRUFBRTtBQUZQLEdBTFM7QUFTYkUsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZILElBQUFBLElBQUksRUFBRSxLQURJO0FBRVZDLElBQUFBLE9BQU8sRUFBRTtBQUZDLEdBVEM7QUFhYkcsRUFBQUEsTUFBTSxFQUFFO0FBQ05KLElBQUFBLElBQUksRUFBRSxLQURBO0FBRU5DLElBQUFBLE9BQU8sRUFBRTtBQUZILEdBYks7QUFrQmJJLEVBQUFBLG1CQUFtQixFQUFFO0FBQ25CTCxJQUFBQSxJQUFJLEVBQUUsS0FEYTtBQUVuQkMsSUFBQUEsT0FBTyxFQUFFO0FBRlUsR0FsQlI7QUF1QmJLLEVBQUFBLEtBQUssRUFBRTtBQUNMTixJQUFBQSxJQUFJLEVBQUUsS0FERDtBQUVMQyxJQUFBQSxPQUFPLEVBQUU7QUFGSixHQXZCTTtBQTRCYjtBQUNBO0FBQ0FNLEVBQUFBLFlBQVksRUFBRTtBQUNaUCxJQUFBQSxJQUFJLEVBQUUsS0FETTtBQUVaQyxJQUFBQSxPQUFPLEVBQUU7QUFGRyxHQTlCRDtBQWtDYk8sRUFBQUEsaUJBQWlCLEVBQUU7QUFDakJSLElBQUFBLElBQUksRUFBRSxLQURXO0FBRWpCQyxJQUFBQSxPQUFPLEVBQUUsRUFGUTtBQUdqQlEsSUFBQUEsS0FBSyxFQUFFO0FBSFUsR0FsQ047QUF3Q2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxFQUFBQSxLQUFLLEVBQUU7QUFDTFYsSUFBQUEsSUFBSSxFQUFFLEtBREQ7QUFFTEMsSUFBQUEsT0FBTyxFQUFFLElBRko7QUFHTFUsSUFBQUEsUUFBUSxFQUFFO0FBSEwsR0FoRE07QUFxRGJDLEVBQUFBLFFBQVEsRUFBRTtBQUNSWixJQUFBQSxJQUFJLEVBQUUsS0FERTtBQUVSQyxJQUFBQSxPQUFPLEVBQUU7QUFGRCxHQXJERztBQXlEYlksRUFBQUEsY0FBYyxFQUFFO0FBQ2RiLElBQUFBLElBQUksRUFBRSxLQURRO0FBRWQ7QUFDQUMsSUFBQUEsT0FBTyxFQUFFO0FBQ1BhLE1BQUFBLE1BQU0sRUFBRTtBQUNOZixRQUFBQSxJQUFJLEVBQUU7QUFEQSxPQUREO0FBSVBnQixNQUFBQSxPQUFPLEVBQUU7QUFDUEMsUUFBQUEsU0FBUyxFQUFFLE1BREo7QUFFUEMsUUFBQUEsU0FBUyxFQUFFLENBRko7QUFHUEMsUUFBQUEsc0JBQXNCLEVBQUUsSUFIakI7QUFJUEMsUUFBQUEsc0JBQXNCLEVBQUUsSUFKakI7QUFLUEMsUUFBQUEsY0FBYyxFQUFFLE1BTFQ7QUFNUEMsUUFBQUEsWUFBWSxFQUFFLElBTlA7QUFPUEMsUUFBQUEsTUFBTSxFQUFFLENBUEQ7QUFRUEMsUUFBQUEsY0FBYyxFQUFFLFdBUlQ7QUFTUEMsUUFBQUEsbUJBQW1CLEVBQUUsTUFUZDtBQVVQQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQVZYO0FBSkY7QUFISyxHQXpESCxDQThFYjs7QUE5RWEsQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZToge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICBpZDoge1xuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHQ6ICcnLFxuICB9LFxuICBhdWRpb0ZpbGVzOiB7XG4gICAgdHlwZTogJ2FueScsXG4gICAgZGVmYXVsdDogW10sXG4gIH0sXG4gIGxhYmVsczoge1xuICAgIHR5cGU6ICdhbnknLFxuICAgIGRlZmF1bHQ6IFtdLFxuICB9LFxuXG4gIGxhYmVsQXVkaW9GaWxlVGFibGU6IHtcbiAgICB0eXBlOiAnYW55JyxcbiAgICBkZWZhdWx0OiBbXSxcbiAgfSxcblxuICBncmFwaDoge1xuICAgIHR5cGU6ICdhbnknLFxuICAgIGRlZmF1bHQ6IHt9LFxuICB9LFxuXG4gIC8vIHRoZXNlIHR3byBhcmUgbm90IHBlcnNpc3RlZCBhcyBpcywgdGhleSBhcmUgbWl4ZWQgaW4gdGhlIFwiZ3JhcGhcIlxuICAvLyBAdG9kbyAtIGRvY3VtZW50IHRoaXMgYmVoYXZpb3IsIHRoaXMgaXMgaGFyZCB0byB1bmRlcnN0YW5kXG4gIGdyYXBoT3B0aW9uczoge1xuICAgIHR5cGU6ICdhbnknLFxuICAgIGRlZmF1bHQ6IHt9LFxuICB9LFxuICBncmFwaE9wdGlvbnNFdmVudDoge1xuICAgIHR5cGU6ICdhbnknLFxuICAgIGRlZmF1bHQ6IHt9LFxuICAgIGV2ZW50OiB0cnVlLFxuICB9LFxuXG4gIC8vIHRoaXMgc2hvdWxkIGJlbG9uZyB0byB0aGUgXCJlbmNvZGVyIC8gZGVjb2RlclwiXG4gIC8vIHRoaXMgbmVlZHMgdG8gYmUgZGlzY3Vzc2VkIGZ1cnRoZXIuLi4gd2hhdCB3b3VsZCBiZSBjbGVhblxuICAvLyBhcmNoaXRlY3R1cmUgLyBzdHJhdGVneSBmb3IgdGhhdCwgZS5nLlxuICAvLyAtIHdlIGRvbid0IHdhbnQgdG8gZGlzcGF0Y2ggdGhlIGV4YW1wbGVzIGV2ZXJ5d2hlcmUsXG4gIC8vIC0gaG93IHRvIGF0dGFjaCBhbiBleGFtcGxlIHRvIGEgcGFydGljdWxhciBlbmNvZGVyIC8gZGVjb2RlciBpbnN0YW5jZSxcbiAgLy8gLSBzYW1lIGZvciBjb25maWcsIGV0Yy5cbiAgLy9cbiAgLy8gQHNlZSBhbHNvIGBwbGF5ZXJgIHNjaGVtYVxuICBtb2RlbDoge1xuICAgIHR5cGU6ICdhbnknLFxuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgbnVsbGFibGU6IHRydWUsXG4gIH0sXG4gIGV4YW1wbGVzOiB7XG4gICAgdHlwZTogJ2FueScsXG4gICAgZGVmYXVsdDoge30sXG4gIH0sXG4gIGxlYXJuaW5nQ29uZmlnOiB7XG4gICAgdHlwZTogJ2FueScsXG4gICAgLy8gcG9zdHVyZSBkZWZhdWx0IGZvciBub3cuLi5cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0YXJnZXQ6IHtcbiAgICAgICAgbmFtZTogJ3htbScsXG4gICAgICB9LFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBtb2RlbFR5cGU6ICdoaG1tJyxcbiAgICAgICAgZ2F1c3NpYW5zOiAxLFxuICAgICAgICBhYnNvbHV0ZVJlZ3VsYXJpemF0aW9uOiAwLjAxLFxuICAgICAgICByZWxhdGl2ZVJlZ3VsYXJpemF0aW9uOiAwLjAxLFxuICAgICAgICBjb3ZhcmlhbmNlTW9kZTogJ2Z1bGwnLFxuICAgICAgICBoaWVyYXJjaGljYWw6IHRydWUsXG4gICAgICAgIHN0YXRlczogNCxcbiAgICAgICAgdHJhbnNpdGlvbk1vZGU6ICdsZWZ0cmlnaHQnLFxuICAgICAgICByZWdyZXNzaW9uRXN0aW1hdG9yOiAnZnVsbCcsXG4gICAgICAgIGxpa2VsaWhvb2RXaW5kb3c6IDEwLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICAvLyAuLi5cbn07XG4iXX0=