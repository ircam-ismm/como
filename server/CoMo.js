"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _serveStatic = _interopRequireDefault(require("serve-static"));

var _server = _interopRequireDefault(require("@soundworks/plugin-filesystem/server"));

var _server2 = _interopRequireDefault(require("@soundworks/plugin-platform/server"));

var _server3 = _interopRequireDefault(require("@soundworks/plugin-checkin/server"));

var _server4 = _interopRequireDefault(require("@soundworks/plugin-audio-buffer-loader/server"));

var _server5 = _interopRequireDefault(require("@soundworks/plugin-sync/server"));

var _server6 = _interopRequireDefault(require("@soundworks/plugin-scripting/server"));

var _server7 = _interopRequireDefault(require("@soundworks/plugin-logger/server"));

var _index = _interopRequireDefault(require("./sources/index.js"));

var _index2 = _interopRequireDefault(require("../common/modules/index.js"));

var _Project = _interopRequireDefault(require("./Project.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CoMo {
  // init
  constructor(server, projectsDirectory, projectName) {
    this.server = server;
    this.projectName = projectName;
    this.projectDirectory = _path.default.join(projectsDirectory, projectName);
    this.project = null;
    this.sources = _index.default;
    this.modules = _index2.default;
    this.idClientMap = new Map(); // register plugins needed for

    this.server.pluginManager.register('file-watcher', _server.default, {
      directories: [{
        name: 'audio',
        path: _path.default.join(this.projectDirectory, 'audio'),
        publicDirectory: 'audio'
      }, {
        name: 'sessions',
        path: _path.default.join(this.projectDirectory, 'sessions'),
        publicDirectory: 'sessions'
      }, {
        // for now, we can't create presets dynamically
        name: 'presets',
        path: _path.default.join(this.projectDirectory, 'presets'),
        publicDirectory: 'presets'
      }]
    });
    this.server.pluginManager.register('logger', _server7.default, {
      directory: _path.default.join(this.projectDirectory, 'recordings')
    });

    const scriptsDataDir = _path.default.join(this.projectDirectory, 'scripts/data');

    const scriptsAudioDir = _path.default.join(this.projectDirectory, 'scripts/audio');

    this.server.pluginManager.register('scripts-data', _server6.default, {
      directory: scriptsDataDir,
      defaultScriptValue: _fs.default.readFileSync(_path.default.join(scriptsDataDir, 'default.js')).toString()
    });
    this.server.pluginManager.register('scripts-audio', _server6.default, {
      directory: scriptsAudioDir,
      defaultScriptValue: _fs.default.readFileSync(_path.default.join(scriptsAudioDir, 'default.js')).toString()
    });
    this.server.pluginManager.register('sync', _server5.default);
    this.server.pluginManager.register('platform', _server2.default);
    this.server.pluginManager.register('checkin', _server3.default);
    this.server.pluginManager.register('audio-buffer-loader', _server4.default);
  }

  get clientTypes() {
    const clientTypes = Object.keys(this.server.config.app.clients);
    return clientTypes;
  }

  async init(config) {
    // open public route for audio files
    this.server.router.use('audio', (0, _serveStatic.default)(_path.default.join(this.projectDirectory, 'audio'))); // projects needs the file watcher

    this.fileWatcher = this.server.pluginManager.get('file-watcher');
    return Promise.resolve(true);
  }

  async start() {
    // server is started and all plugins are ready
    this.project = new _Project.default(this);
    await this.project.init();
    return Promise.resolve(true);
  }

  configureExperience(experience) {
    this.experience = experience;
    this.experience.plugins = {};
    const plugins = ['file-watcher', 'sync', 'platform', 'checkin', 'audio-buffer-loader', 'scripts-data', 'scripts-audio', 'logger'];
    plugins.forEach(pluginName => {
      this.experience.plugins[pluginName] = this.experience.require(pluginName);
    });
  }

  addClient(client) {
    this.idClientMap.set(client.id, client);
    client.socket.addListener(`como:project:createSession:req`, async (sessionName, graphPreset) => {
      const uuid = await this.project.createSession(sessionName, graphPreset);

      if (uuid !== null) {
        client.socket.send(`como:project:createSession:ack`, uuid);
      } else {
        client.socket.send(`como:project:createSession:err`, 'session already exists');
      }
    });
    client.socket.addListener(`como:project:deleteSession:req`, async sessionId => {
      const result = await this.project.deleteSession(sessionId);

      if (result === true) {
        client.socket.send(`como:project:deleteSession:ack`);
      } else {
        client.socket.send(`como:project:deleteSession:err`, 'session ${sessionId} does not exists');
      }
    }); // streams routing definitions

    client.socket.addListener(`como:routing:createStreamRoute:req`, async (fromSourceId, toNodeId) => {
      const result = await this.project.createStreamRoute(fromSourceId, toNodeId);

      if (result === true) {
        client.socket.send(`como:routing:createStreamRoute:ack`, result);
      } else {
        client.socket.send(`como:routing:createStreamRoute:err`, `an error occured creating route [${fromSourceId}, ${toNodeId}]`);
      }
    });
    client.socket.addListener(`como:routing:deleteStreamRoute:req`, async (fromSourceId, toNodeId) => {
      const result = await this.project.deleteStreamRoute(fromSourceId, toNodeId);

      if (result === true) {
        client.socket.send(`como:routing:deleteStreamRoute:ack`, result);
      } else {
        client.socket.send(`como:routing:deleteStreamRoute:err`, `an error occured creating route [${fromSourceId}, ${toNodeId}]`);
      }
    }); // streams routing

    client.socket.addBinaryListener('stream', frame => {
      this.project.propagateStreamFrame(frame);
    }); // ------------------------------------------------------------
    // session management

    client.socket.addListener(`como:session:addExample`, async (sessionId, example) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.addExample(example);
      }
    });
    client.socket.addListener(`como:session:deleteExample`, async (sessionId, exampleUuid) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.deleteExample(exampleUuid);
      }
    });
    client.socket.addListener(`como:session:clearExamples`, async (sessionId, label = null) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId, label);
        session.clearExamples(label);
      }
    });
    client.socket.addListener(`como:session:createLabel`, async (sessionId, label) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.createLabel(label);
      }
    });
    client.socket.addListener(`como:session:updateLabel`, async (sessionId, oldLabel, newLabel) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.updateLabel(oldLabel, newLabel);
      }
    });
    client.socket.addListener(`como:session:deleteLabel`, async (sessionId, label) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.deleteLabel(label);
      }
    });
    client.socket.addListener(`como:session:toggleAudioFile`, async (sessionId, filename, active) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.toggleAudioFile(filename, active);
      }
    });
    client.socket.addListener(`como:session:createLabelAudioFileRow`, async (sessionId, row) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.createLabelAudioFileRow(row);
      }
    });
    client.socket.addListener(`como:session:deleteLabelAudioFileRow`, async (sessionId, row) => {
      if (this.project.sessions.has(sessionId)) {
        const session = this.project.sessions.get(sessionId);
        session.deleteLabelAudioFileRow(row);
      }
    });
  }

  deleteClient(client) {
    this.idClientMap.delete(client.id, client);
    this.project.clearStreamRouting(null, client.id); // clear routing where client is the target
  }

}

var _default = CoMo;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,