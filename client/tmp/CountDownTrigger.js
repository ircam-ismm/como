"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _client = require("soundworks/client");

const defaults = {
  threshold: 0.0001,
  offDelay: 0.3,
  preRollCount: 2,
  // num ticks before recording
  preRollInterval: 1,
  // in seconds
  startCallback: null,
  stopCallback: null,
  playSound: null
};

class CountDownTrigger {
  constructor(options) {
    this.options = Object.assign({}, defaults, options);
    this.isMoving = false;
    this.stopTimeoutId = null;
    this.prerollId = null;
    this.state = 'off';
    this.counter = 0;
  }

  set threshold(value) {
    this.options.threshold = value;
  }

  set offDelay(value) {
    this.options.offDelay = value;
  }

  set preRollCount(value) {
    this.options.preRollCount = value;
  }

  set preRollInterval(value) {
    this.options.preRollInterval = value;
  }

  process(energy) {
    if (energy > this.options.threshold && !this.isMoving) {
      this.isMoving = true;

      if (this.stopTimeoutId) {
        clearTimeout(this.stopTimeoutId);
        this.stopTimeoutId = null;
      }
    } else if (energy < this.options.threshold && this.isMoving) {
      this.isMoving = false;
      this.stopTimeoutId = setTimeout(() => {
        this.options.stopCallback();
        this.stopTimeoutId = null;
        this.isMoving = false;
      }, this.options.offDelay * 1000);
    }
  }
  /**
   * state can be 'preroll', 'on', 'off'
   */


  setState(state) {
    this.state = state;

    if (this.state === 'preroll') {
      this.counter = this.options.preRollCount;
      this.prerollId = setInterval(() => {
        if (this.counter === 0) {
          clearInterval(this.prerollId);
          this.options.startCallback();
        } else {
          this.options.countCallback(this.counter);
          this.counter -= 1;
        }
      }, this.options.preRollInterval * 1000);
    } else if (this.state === 'on') {
      // listen for off
      clearInterval(this.prerollId);
      this.isMoving = true;
    } else if (this.state === 'off') {
      this.options.stopCallback();
      this.stopTimeoutId = null;
      this.isMoving = false;
    }
  }

}

var _default = CountDownTrigger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQvdG1wL0NvdW50RG93blRyaWdnZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJ0aHJlc2hvbGQiLCJvZmZEZWxheSIsInByZVJvbGxDb3VudCIsInByZVJvbGxJbnRlcnZhbCIsInN0YXJ0Q2FsbGJhY2siLCJzdG9wQ2FsbGJhY2siLCJwbGF5U291bmQiLCJDb3VudERvd25UcmlnZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNNb3ZpbmciLCJzdG9wVGltZW91dElkIiwicHJlcm9sbElkIiwic3RhdGUiLCJjb3VudGVyIiwidmFsdWUiLCJwcm9jZXNzIiwiZW5lcmd5IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsInNldFN0YXRlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiY291bnRDYWxsYmFjayJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLE1BQU1BLFFBQVEsR0FBRztBQUNmQyxFQUFBQSxTQUFTLEVBQUUsTUFESTtBQUVmQyxFQUFBQSxRQUFRLEVBQUUsR0FGSztBQUdmQyxFQUFBQSxZQUFZLEVBQUUsQ0FIQztBQUdFO0FBQ2pCQyxFQUFBQSxlQUFlLEVBQUUsQ0FKRjtBQUlLO0FBQ3BCQyxFQUFBQSxhQUFhLEVBQUUsSUFMQTtBQU1mQyxFQUFBQSxZQUFZLEVBQUUsSUFOQztBQU9mQyxFQUFBQSxTQUFTLEVBQUU7QUFQSSxDQUFqQjs7QUFVQSxNQUFNQyxnQkFBTixDQUF1QjtBQUNyQkMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVU7QUFDbkIsU0FBS0EsT0FBTCxHQUFlQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCWixRQUFsQixFQUE0QlUsT0FBNUIsQ0FBZjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLENBQWY7QUFDRDs7QUFFWSxNQUFUaEIsU0FBUyxDQUFDaUIsS0FBRCxFQUFRO0FBQ25CLFNBQUtSLE9BQUwsQ0FBYVQsU0FBYixHQUF5QmlCLEtBQXpCO0FBQ0Q7O0FBRVcsTUFBUmhCLFFBQVEsQ0FBQ2dCLEtBQUQsRUFBUTtBQUNsQixTQUFLUixPQUFMLENBQWFSLFFBQWIsR0FBd0JnQixLQUF4QjtBQUNEOztBQUVlLE1BQVpmLFlBQVksQ0FBQ2UsS0FBRCxFQUFRO0FBQ3RCLFNBQUtSLE9BQUwsQ0FBYVAsWUFBYixHQUE0QmUsS0FBNUI7QUFDRDs7QUFFa0IsTUFBZmQsZUFBZSxDQUFDYyxLQUFELEVBQVE7QUFDekIsU0FBS1IsT0FBTCxDQUFhTixlQUFiLEdBQStCYyxLQUEvQjtBQUNEOztBQUVEQyxFQUFBQSxPQUFPLENBQUNDLE1BQUQsRUFBUztBQUNkLFFBQUlBLE1BQU0sR0FBRyxLQUFLVixPQUFMLENBQWFULFNBQXRCLElBQW1DLENBQUMsS0FBS1ksUUFBN0MsRUFBdUQ7QUFDckQsV0FBS0EsUUFBTCxHQUFnQixJQUFoQjs7QUFFQSxVQUFJLEtBQUtDLGFBQVQsRUFBd0I7QUFDdEJPLFFBQUFBLFlBQVksQ0FBQyxLQUFLUCxhQUFOLENBQVo7QUFDQSxhQUFLQSxhQUFMLEdBQXFCLElBQXJCO0FBQ0Q7QUFDRixLQVBELE1BT08sSUFBSU0sTUFBTSxHQUFHLEtBQUtWLE9BQUwsQ0FBYVQsU0FBdEIsSUFBbUMsS0FBS1ksUUFBNUMsRUFBc0Q7QUFDM0QsV0FBS0EsUUFBTCxHQUFnQixLQUFoQjtBQUVBLFdBQUtDLGFBQUwsR0FBcUJRLFVBQVUsQ0FBQyxNQUFNO0FBQ3BDLGFBQUtaLE9BQUwsQ0FBYUosWUFBYjtBQUNBLGFBQUtRLGFBQUwsR0FBcUIsSUFBckI7QUFDQSxhQUFLRCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0QsT0FKOEIsRUFJNUIsS0FBS0gsT0FBTCxDQUFhUixRQUFiLEdBQXdCLElBSkksQ0FBL0I7QUFLRDtBQUNGO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRXFCLEVBQUFBLFFBQVEsQ0FBQ1AsS0FBRCxFQUFRO0FBQ2QsU0FBS0EsS0FBTCxHQUFhQSxLQUFiOztBQUVBLFFBQUksS0FBS0EsS0FBTCxLQUFlLFNBQW5CLEVBQThCO0FBQzVCLFdBQUtDLE9BQUwsR0FBZSxLQUFLUCxPQUFMLENBQWFQLFlBQTVCO0FBRUEsV0FBS1ksU0FBTCxHQUFpQlMsV0FBVyxDQUFDLE1BQU07QUFDakMsWUFBSSxLQUFLUCxPQUFMLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3RCUSxVQUFBQSxhQUFhLENBQUMsS0FBS1YsU0FBTixDQUFiO0FBQ0EsZUFBS0wsT0FBTCxDQUFhTCxhQUFiO0FBQ0QsU0FIRCxNQUdPO0FBQ0wsZUFBS0ssT0FBTCxDQUFhZ0IsYUFBYixDQUEyQixLQUFLVCxPQUFoQztBQUNBLGVBQUtBLE9BQUwsSUFBZ0IsQ0FBaEI7QUFDRDtBQUNGLE9BUjJCLEVBUXpCLEtBQUtQLE9BQUwsQ0FBYU4sZUFBYixHQUErQixJQVJOLENBQTVCO0FBU0QsS0FaRCxNQVlPLElBQUksS0FBS1ksS0FBTCxLQUFlLElBQW5CLEVBQXlCO0FBQzlCO0FBQ0FTLE1BQUFBLGFBQWEsQ0FBQyxLQUFLVixTQUFOLENBQWI7QUFDQSxXQUFLRixRQUFMLEdBQWdCLElBQWhCO0FBQ0QsS0FKTSxNQUlBLElBQUksS0FBS0csS0FBTCxLQUFlLEtBQW5CLEVBQTBCO0FBQy9CLFdBQUtOLE9BQUwsQ0FBYUosWUFBYjtBQUNBLFdBQUtRLGFBQUwsR0FBcUIsSUFBckI7QUFDQSxXQUFLRCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7QUFDRjs7QUF4RW9COztlQTJFUkwsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhdWRpb0NvbnRleHQsIGF1ZGlvIH0gZnJvbSAnc291bmR3b3Jrcy9jbGllbnQnO1xuXG5jb25zdCBkZWZhdWx0cyA9IHtcbiAgdGhyZXNob2xkOiAwLjAwMDEsXG4gIG9mZkRlbGF5OiAwLjMsXG4gIHByZVJvbGxDb3VudDogMiwgLy8gbnVtIHRpY2tzIGJlZm9yZSByZWNvcmRpbmdcbiAgcHJlUm9sbEludGVydmFsOiAxLCAvLyBpbiBzZWNvbmRzXG4gIHN0YXJ0Q2FsbGJhY2s6IG51bGwsXG4gIHN0b3BDYWxsYmFjazogbnVsbCxcbiAgcGxheVNvdW5kOiBudWxsLFxufVxuXG5jbGFzcyBDb3VudERvd25UcmlnZ2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgdGhpcy5zdG9wVGltZW91dElkID0gbnVsbDtcbiAgICB0aGlzLnByZXJvbGxJZCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZSA9ICdvZmYnO1xuICAgIHRoaXMuY291bnRlciA9IDA7XG4gIH1cblxuICBzZXQgdGhyZXNob2xkKHZhbHVlKSB7XG4gICAgdGhpcy5vcHRpb25zLnRocmVzaG9sZCA9IHZhbHVlO1xuICB9XG5cbiAgc2V0IG9mZkRlbGF5KHZhbHVlKSB7XG4gICAgdGhpcy5vcHRpb25zLm9mZkRlbGF5ID0gdmFsdWU7XG4gIH1cblxuICBzZXQgcHJlUm9sbENvdW50KHZhbHVlKSB7XG4gICAgdGhpcy5vcHRpb25zLnByZVJvbGxDb3VudCA9IHZhbHVlO1xuICB9XG5cbiAgc2V0IHByZVJvbGxJbnRlcnZhbCh2YWx1ZSkge1xuICAgIHRoaXMub3B0aW9ucy5wcmVSb2xsSW50ZXJ2YWwgPSB2YWx1ZTtcbiAgfVxuXG4gIHByb2Nlc3MoZW5lcmd5KSB7XG4gICAgaWYgKGVuZXJneSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgJiYgIXRoaXMuaXNNb3ZpbmcpIHtcbiAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodGhpcy5zdG9wVGltZW91dElkKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0b3BUaW1lb3V0SWQpO1xuICAgICAgICB0aGlzLnN0b3BUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5lcmd5IDwgdGhpcy5vcHRpb25zLnRocmVzaG9sZCAmJiB0aGlzLmlzTW92aW5nKSB7XG4gICAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuc3RvcFRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLm9wdGlvbnMuc3RvcENhbGxiYWNrKCk7XG4gICAgICAgIHRoaXMuc3RvcFRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgIH0sIHRoaXMub3B0aW9ucy5vZmZEZWxheSAqIDEwMDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBzdGF0ZSBjYW4gYmUgJ3ByZXJvbGwnLCAnb24nLCAnb2ZmJ1xuICAgKi9cbiAgc2V0U3RhdGUoc3RhdGUpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG5cbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ3ByZXJvbGwnKSB7XG4gICAgICB0aGlzLmNvdW50ZXIgPSB0aGlzLm9wdGlvbnMucHJlUm9sbENvdW50O1xuXG4gICAgICB0aGlzLnByZXJvbGxJZCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gMCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wcmVyb2xsSWQpO1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5zdGFydENhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vcHRpb25zLmNvdW50Q2FsbGJhY2sodGhpcy5jb3VudGVyKTtcbiAgICAgICAgICB0aGlzLmNvdW50ZXIgLT0gMTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcy5vcHRpb25zLnByZVJvbGxJbnRlcnZhbCAqIDEwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gJ29uJykge1xuICAgICAgLy8gbGlzdGVuIGZvciBvZmZcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5wcmVyb2xsSWQpO1xuICAgICAgdGhpcy5pc01vdmluZyA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAnb2ZmJykge1xuICAgICAgdGhpcy5vcHRpb25zLnN0b3BDYWxsYmFjaygpO1xuICAgICAgdGhpcy5zdG9wVGltZW91dElkID0gbnVsbDtcbiAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ291bnREb3duVHJpZ2dlcjtcbiJdfQ==