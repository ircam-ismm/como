"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const defaults = {
  highThreshold: 0.2,
  lowThreshold: 0.05,
  offDelay: 200,
  startCallback: null,
  stopCallback: null
};

class AutoTrigger {
  constructor(options) {
    this.params = Object.assign({}, defaults, options);
    this.isMoving = false;
    this.timeoutId = null;
    this.state = 'off';
  }

  set highThreshold(value) {
    this.params.highThreshold = value;
  }

  get highThreshold() {
    return this.params.highThreshold;
  }

  set lowThreshold(value) {
    this.params.lowThreshold = value;
  }

  get lowThreshold() {
    return this.params.lowThreshold;
  }

  set offDelay(value) {
    this.params.offDelay = value;
  }

  get offDelay() {
    return this.params.offDelay;
  }

  process(value) {
    if (this.state === 'on') {
      if (value > this.params.highThreshold && !this.isMoving) {
        this.isMoving = true;

        if (this.timeoutId === null) {
          this.params.startCallback();
        } else {
          clearTimeout(this.timeoutId);
          this.timeoutId = null;
        }
      } else if (value < this.params.lowThreshold && this.isMoving) {
        this.isMoving = false; // keep this out of the timeout

        if (this.timeoutId === null) {
          this.timeoutId = setTimeout(() => {
            this.params.stopCallback();
            this.timeoutId = null;
            this.isMoving = false;
          }, this.params.offDelay);
        }
      }
    } else {
      if (this.isMoving) this.isMoving = false;
    }
  }

  setState(state) {
    this.state = state;

    if (state === 'off') {
      if (this.timeoutId !== null) clearTimeout(this.timeoutId);
      this.timeoutId = null;
      this.params.stopCallback();
      this.isMoving = false;
    }
  }

}

var _default = AutoTrigger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQvdG1wL0F1dG9UcmlnZ2VyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwiaGlnaFRocmVzaG9sZCIsImxvd1RocmVzaG9sZCIsIm9mZkRlbGF5Iiwic3RhcnRDYWxsYmFjayIsInN0b3BDYWxsYmFjayIsIkF1dG9UcmlnZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGFyYW1zIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNNb3ZpbmciLCJ0aW1lb3V0SWQiLCJzdGF0ZSIsInZhbHVlIiwicHJvY2VzcyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJzZXRTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHO0FBQ2ZDLEVBQUFBLGFBQWEsRUFBRSxHQURBO0FBRWZDLEVBQUFBLFlBQVksRUFBRSxJQUZDO0FBR2ZDLEVBQUFBLFFBQVEsRUFBRSxHQUhLO0FBSWZDLEVBQUFBLGFBQWEsRUFBRSxJQUpBO0FBS2ZDLEVBQUFBLFlBQVksRUFBRTtBQUxDLENBQWpCOztBQVFBLE1BQU1DLFdBQU4sQ0FBa0I7QUFDaEJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLE1BQUwsR0FBY0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQlgsUUFBbEIsRUFBNEJRLE9BQTVCLENBQWQ7QUFDQSxTQUFLSSxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFiO0FBQ0Q7O0FBRWdCLE1BQWJiLGFBQWEsQ0FBQ2MsS0FBRCxFQUFRO0FBQ3ZCLFNBQUtOLE1BQUwsQ0FBWVIsYUFBWixHQUE0QmMsS0FBNUI7QUFDRDs7QUFFZ0IsTUFBYmQsYUFBYSxHQUFHO0FBQ2xCLFdBQU8sS0FBS1EsTUFBTCxDQUFZUixhQUFuQjtBQUNEOztBQUVlLE1BQVpDLFlBQVksQ0FBQ2EsS0FBRCxFQUFRO0FBQ3RCLFNBQUtOLE1BQUwsQ0FBWVAsWUFBWixHQUEyQmEsS0FBM0I7QUFDRDs7QUFFZSxNQUFaYixZQUFZLEdBQUc7QUFDakIsV0FBTyxLQUFLTyxNQUFMLENBQVlQLFlBQW5CO0FBQ0Q7O0FBRVcsTUFBUkMsUUFBUSxDQUFDWSxLQUFELEVBQVE7QUFDbEIsU0FBS04sTUFBTCxDQUFZTixRQUFaLEdBQXVCWSxLQUF2QjtBQUNEOztBQUVXLE1BQVJaLFFBQVEsR0FBRztBQUNiLFdBQU8sS0FBS00sTUFBTCxDQUFZTixRQUFuQjtBQUNEOztBQUVEYSxFQUFBQSxPQUFPLENBQUNELEtBQUQsRUFBUTtBQUNiLFFBQUksS0FBS0QsS0FBTCxLQUFlLElBQW5CLEVBQXlCO0FBQ3ZCLFVBQUlDLEtBQUssR0FBRyxLQUFLTixNQUFMLENBQVlSLGFBQXBCLElBQXFDLENBQUMsS0FBS1csUUFBL0MsRUFBeUQ7QUFDdkQsYUFBS0EsUUFBTCxHQUFnQixJQUFoQjs7QUFFQSxZQUFJLEtBQUtDLFNBQUwsS0FBbUIsSUFBdkIsRUFBNkI7QUFDM0IsZUFBS0osTUFBTCxDQUFZTCxhQUFaO0FBQ0QsU0FGRCxNQUVPO0FBQ0xhLFVBQUFBLFlBQVksQ0FBQyxLQUFLSixTQUFOLENBQVo7QUFDQSxlQUFLQSxTQUFMLEdBQWlCLElBQWpCO0FBQ0Q7QUFFRixPQVZELE1BVU8sSUFBSUUsS0FBSyxHQUFHLEtBQUtOLE1BQUwsQ0FBWVAsWUFBcEIsSUFBb0MsS0FBS1UsUUFBN0MsRUFBdUQ7QUFDNUQsYUFBS0EsUUFBTCxHQUFnQixLQUFoQixDQUQ0RCxDQUNyQzs7QUFFdkIsWUFBSSxLQUFLQyxTQUFMLEtBQW1CLElBQXZCLEVBQTZCO0FBQzNCLGVBQUtBLFNBQUwsR0FBaUJLLFVBQVUsQ0FBQyxNQUFNO0FBQ2hDLGlCQUFLVCxNQUFMLENBQVlKLFlBQVo7QUFDQSxpQkFBS1EsU0FBTCxHQUFpQixJQUFqQjtBQUNBLGlCQUFLRCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0QsV0FKMEIsRUFJeEIsS0FBS0gsTUFBTCxDQUFZTixRQUpZLENBQTNCO0FBS0Q7QUFDRjtBQUNGLEtBdEJELE1Bc0JPO0FBQ0wsVUFBSSxLQUFLUyxRQUFULEVBQ0UsS0FBS0EsUUFBTCxHQUFnQixLQUFoQjtBQUNIO0FBQ0Y7O0FBRURPLEVBQUFBLFFBQVEsQ0FBQ0wsS0FBRCxFQUFRO0FBQ2QsU0FBS0EsS0FBTCxHQUFhQSxLQUFiOztBQUVBLFFBQUlBLEtBQUssS0FBSyxLQUFkLEVBQXFCO0FBQ25CLFVBQUksS0FBS0QsU0FBTCxLQUFtQixJQUF2QixFQUNFSSxZQUFZLENBQUMsS0FBS0osU0FBTixDQUFaO0FBRUYsV0FBS0EsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFdBQUtKLE1BQUwsQ0FBWUosWUFBWjtBQUNBLFdBQUtPLFFBQUwsR0FBZ0IsS0FBaEI7QUFDRDtBQUNGOztBQXhFZTs7ZUEyRUhOLFciLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgaGlnaFRocmVzaG9sZDogMC4yLFxuICBsb3dUaHJlc2hvbGQ6IDAuMDUsXG4gIG9mZkRlbGF5OiAyMDAsXG4gIHN0YXJ0Q2FsbGJhY2s6IG51bGwsXG4gIHN0b3BDYWxsYmFjazogbnVsbCxcbn07XG5cbmNsYXNzIEF1dG9UcmlnZ2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHRoaXMucGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGhpcy5zdGF0ZSA9ICdvZmYnO1xuICB9XG5cbiAgc2V0IGhpZ2hUaHJlc2hvbGQodmFsdWUpIHtcbiAgICB0aGlzLnBhcmFtcy5oaWdoVGhyZXNob2xkID0gdmFsdWU7XG4gIH1cblxuICBnZXQgaGlnaFRocmVzaG9sZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMuaGlnaFRocmVzaG9sZDtcbiAgfVxuXG4gIHNldCBsb3dUaHJlc2hvbGQodmFsdWUpIHtcbiAgICB0aGlzLnBhcmFtcy5sb3dUaHJlc2hvbGQgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCBsb3dUaHJlc2hvbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLmxvd1RocmVzaG9sZDtcbiAgfVxuXG4gIHNldCBvZmZEZWxheSh2YWx1ZSkge1xuICAgIHRoaXMucGFyYW1zLm9mZkRlbGF5ID0gdmFsdWU7XG4gIH1cblxuICBnZXQgb2ZmRGVsYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLm9mZkRlbGF5O1xuICB9XG5cbiAgcHJvY2Vzcyh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YXRlID09PSAnb24nKSB7XG4gICAgICBpZiAodmFsdWUgPiB0aGlzLnBhcmFtcy5oaWdoVGhyZXNob2xkICYmICF0aGlzLmlzTW92aW5nKSB7XG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRJZCA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMucGFyYW1zLnN0YXJ0Q2FsbGJhY2soKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICAgICAgICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlIDwgdGhpcy5wYXJhbXMubG93VGhyZXNob2xkICYmIHRoaXMuaXNNb3ZpbmcpIHtcbiAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlOyAvLyBrZWVwIHRoaXMgb3V0IG9mIHRoZSB0aW1lb3V0XG5cbiAgICAgICAgaWYgKHRoaXMudGltZW91dElkID09PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGFyYW1zLnN0b3BDYWxsYmFjaygpO1xuICAgICAgICAgICAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgICAgICAgIH0sIHRoaXMucGFyYW1zLm9mZkRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc01vdmluZylcbiAgICAgICAgdGhpcy5pc01vdmluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXG4gICAgaWYgKHN0YXRlID09PSAnb2ZmJykge1xuICAgICAgaWYgKHRoaXMudGltZW91dElkICE9PSBudWxsKVxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuXG4gICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgICB0aGlzLnBhcmFtcy5zdG9wQ2FsbGJhY2soKTtcbiAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXV0b1RyaWdnZXI7XG4iXX0=