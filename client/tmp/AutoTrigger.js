"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const defaults = {
  highThreshold: 0.2,
  lowThreshold: 0.05,
  offDelay: 200,
  startCallback: null,
  stopCallback: null
};

class AutoTrigger {
  constructor(options) {
    this.params = Object.assign({}, defaults, options);
    this.isMoving = false;
    this.timeoutId = null;
    this.state = 'off';
  }

  set highThreshold(value) {
    this.params.highThreshold = value;
  }

  get highThreshold() {
    return this.params.highThreshold;
  }

  set lowThreshold(value) {
    this.params.lowThreshold = value;
  }

  get lowThreshold() {
    return this.params.lowThreshold;
  }

  set offDelay(value) {
    this.params.offDelay = value;
  }

  get offDelay() {
    return this.params.offDelay;
  }

  process(value) {
    if (this.state === 'on') {
      if (value > this.params.highThreshold && !this.isMoving) {
        this.isMoving = true;

        if (this.timeoutId === null) {
          this.params.startCallback();
        } else {
          clearTimeout(this.timeoutId);
          this.timeoutId = null;
        }
      } else if (value < this.params.lowThreshold && this.isMoving) {
        this.isMoving = false; // keep this out of the timeout

        if (this.timeoutId === null) {
          this.timeoutId = setTimeout(() => {
            this.params.stopCallback();
            this.timeoutId = null;
            this.isMoving = false;
          }, this.params.offDelay);
        }
      }
    } else {
      if (this.isMoving) this.isMoving = false;
    }
  }

  setState(state) {
    this.state = state;

    if (state === 'off') {
      if (this.timeoutId !== null) clearTimeout(this.timeoutId);
      this.timeoutId = null;
      this.params.stopCallback();
      this.isMoving = false;
    }
  }

}

var _default = AutoTrigger;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQvdG1wL0F1dG9UcmlnZ2VyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwiaGlnaFRocmVzaG9sZCIsImxvd1RocmVzaG9sZCIsIm9mZkRlbGF5Iiwic3RhcnRDYWxsYmFjayIsInN0b3BDYWxsYmFjayIsIkF1dG9UcmlnZ2VyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGFyYW1zIiwiT2JqZWN0IiwiYXNzaWduIiwiaXNNb3ZpbmciLCJ0aW1lb3V0SWQiLCJzdGF0ZSIsInZhbHVlIiwicHJvY2VzcyIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJzZXRTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHO0FBQ2ZDLEVBQUFBLGFBQWEsRUFBRSxHQURBO0FBRWZDLEVBQUFBLFlBQVksRUFBRSxJQUZDO0FBR2ZDLEVBQUFBLFFBQVEsRUFBRSxHQUhLO0FBSWZDLEVBQUFBLGFBQWEsRUFBRSxJQUpBO0FBS2ZDLEVBQUFBLFlBQVksRUFBRTtBQUxDLENBQWpCOztBQVFBLE1BQU1DLFdBQU4sQ0FBa0I7QUFDaEJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLE1BQUwsR0FBY0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQlgsUUFBbEIsRUFBNEJRLE9BQTVCLENBQWQ7QUFDQSxTQUFLSSxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNBLFNBQUtDLEtBQUwsR0FBYSxLQUFiO0FBQ0Q7O0FBRUQsTUFBSWIsYUFBSixDQUFrQmMsS0FBbEIsRUFBeUI7QUFDdkIsU0FBS04sTUFBTCxDQUFZUixhQUFaLEdBQTRCYyxLQUE1QjtBQUNEOztBQUVELE1BQUlkLGFBQUosR0FBb0I7QUFDbEIsV0FBTyxLQUFLUSxNQUFMLENBQVlSLGFBQW5CO0FBQ0Q7O0FBRUQsTUFBSUMsWUFBSixDQUFpQmEsS0FBakIsRUFBd0I7QUFDdEIsU0FBS04sTUFBTCxDQUFZUCxZQUFaLEdBQTJCYSxLQUEzQjtBQUNEOztBQUVELE1BQUliLFlBQUosR0FBbUI7QUFDakIsV0FBTyxLQUFLTyxNQUFMLENBQVlQLFlBQW5CO0FBQ0Q7O0FBRUQsTUFBSUMsUUFBSixDQUFhWSxLQUFiLEVBQW9CO0FBQ2xCLFNBQUtOLE1BQUwsQ0FBWU4sUUFBWixHQUF1QlksS0FBdkI7QUFDRDs7QUFFRCxNQUFJWixRQUFKLEdBQWU7QUFDYixXQUFPLEtBQUtNLE1BQUwsQ0FBWU4sUUFBbkI7QUFDRDs7QUFFRGEsRUFBQUEsT0FBTyxDQUFDRCxLQUFELEVBQVE7QUFDYixRQUFJLEtBQUtELEtBQUwsS0FBZSxJQUFuQixFQUF5QjtBQUN2QixVQUFJQyxLQUFLLEdBQUcsS0FBS04sTUFBTCxDQUFZUixhQUFwQixJQUFxQyxDQUFDLEtBQUtXLFFBQS9DLEVBQXlEO0FBQ3ZELGFBQUtBLFFBQUwsR0FBZ0IsSUFBaEI7O0FBRUEsWUFBSSxLQUFLQyxTQUFMLEtBQW1CLElBQXZCLEVBQTZCO0FBQzNCLGVBQUtKLE1BQUwsQ0FBWUwsYUFBWjtBQUNELFNBRkQsTUFFTztBQUNMYSxVQUFBQSxZQUFZLENBQUMsS0FBS0osU0FBTixDQUFaO0FBQ0EsZUFBS0EsU0FBTCxHQUFpQixJQUFqQjtBQUNEO0FBRUYsT0FWRCxNQVVPLElBQUlFLEtBQUssR0FBRyxLQUFLTixNQUFMLENBQVlQLFlBQXBCLElBQW9DLEtBQUtVLFFBQTdDLEVBQXVEO0FBQzVELGFBQUtBLFFBQUwsR0FBZ0IsS0FBaEIsQ0FENEQsQ0FDckM7O0FBRXZCLFlBQUksS0FBS0MsU0FBTCxLQUFtQixJQUF2QixFQUE2QjtBQUMzQixlQUFLQSxTQUFMLEdBQWlCSyxVQUFVLENBQUMsTUFBTTtBQUNoQyxpQkFBS1QsTUFBTCxDQUFZSixZQUFaO0FBQ0EsaUJBQUtRLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxpQkFBS0QsUUFBTCxHQUFnQixLQUFoQjtBQUNELFdBSjBCLEVBSXhCLEtBQUtILE1BQUwsQ0FBWU4sUUFKWSxDQUEzQjtBQUtEO0FBQ0Y7QUFDRixLQXRCRCxNQXNCTztBQUNMLFVBQUksS0FBS1MsUUFBVCxFQUNFLEtBQUtBLFFBQUwsR0FBZ0IsS0FBaEI7QUFDSDtBQUNGOztBQUVETyxFQUFBQSxRQUFRLENBQUNMLEtBQUQsRUFBUTtBQUNkLFNBQUtBLEtBQUwsR0FBYUEsS0FBYjs7QUFFQSxRQUFJQSxLQUFLLEtBQUssS0FBZCxFQUFxQjtBQUNuQixVQUFJLEtBQUtELFNBQUwsS0FBbUIsSUFBdkIsRUFDRUksWUFBWSxDQUFDLEtBQUtKLFNBQU4sQ0FBWjtBQUVGLFdBQUtBLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxXQUFLSixNQUFMLENBQVlKLFlBQVo7QUFDQSxXQUFLTyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0Q7QUFDRjs7QUF4RWU7O2VBMkVITixXIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdHMgPSB7XG4gIGhpZ2hUaHJlc2hvbGQ6IDAuMixcbiAgbG93VGhyZXNob2xkOiAwLjA1LFxuICBvZmZEZWxheTogMjAwLFxuICBzdGFydENhbGxiYWNrOiBudWxsLFxuICBzdG9wQ2FsbGJhY2s6IG51bGwsXG59O1xuXG5jbGFzcyBBdXRvVHJpZ2dlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuICAgIHRoaXMuc3RhdGUgPSAnb2ZmJztcbiAgfVxuXG4gIHNldCBoaWdoVGhyZXNob2xkKHZhbHVlKSB7XG4gICAgdGhpcy5wYXJhbXMuaGlnaFRocmVzaG9sZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGhpZ2hUaHJlc2hvbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLmhpZ2hUaHJlc2hvbGQ7XG4gIH1cblxuICBzZXQgbG93VGhyZXNob2xkKHZhbHVlKSB7XG4gICAgdGhpcy5wYXJhbXMubG93VGhyZXNob2xkID0gdmFsdWU7XG4gIH1cblxuICBnZXQgbG93VGhyZXNob2xkKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5sb3dUaHJlc2hvbGQ7XG4gIH1cblxuICBzZXQgb2ZmRGVsYXkodmFsdWUpIHtcbiAgICB0aGlzLnBhcmFtcy5vZmZEZWxheSA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IG9mZkRlbGF5KCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5vZmZEZWxheTtcbiAgfVxuXG4gIHByb2Nlc3ModmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ29uJykge1xuICAgICAgaWYgKHZhbHVlID4gdGhpcy5wYXJhbXMuaGlnaFRocmVzaG9sZCAmJiAhdGhpcy5pc01vdmluZykge1xuICAgICAgICB0aGlzLmlzTW92aW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcy50aW1lb3V0SWQgPT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLnBhcmFtcy5zdGFydENhbGxiYWNrKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICAgICAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IHRoaXMucGFyYW1zLmxvd1RocmVzaG9sZCAmJiB0aGlzLmlzTW92aW5nKSB7XG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTsgLy8ga2VlcCB0aGlzIG91dCBvZiB0aGUgdGltZW91dFxuXG4gICAgICAgIGlmICh0aGlzLnRpbWVvdXRJZCA9PT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBhcmFtcy5zdG9wQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9LCB0aGlzLnBhcmFtcy5vZmZEZWxheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuaXNNb3ZpbmcpXG4gICAgICAgIHRoaXMuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzZXRTdGF0ZShzdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcblxuICAgIGlmIChzdGF0ZSA9PT0gJ29mZicpIHtcbiAgICAgIGlmICh0aGlzLnRpbWVvdXRJZCAhPT0gbnVsbClcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcblxuICAgICAgdGhpcy50aW1lb3V0SWQgPSBudWxsO1xuICAgICAgdGhpcy5wYXJhbXMuc3RvcENhbGxiYWNrKCk7XG4gICAgICB0aGlzLmlzTW92aW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEF1dG9UcmlnZ2VyO1xuIl19