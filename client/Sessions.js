"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Session = _interopRequireDefault(require("./Session"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Sessions {
  constructor(como) {
    this.como = como;
  }

  observe(callback) {
    // @note - we need this convoluted stuff because the state itself is created
    // before the `sessionOverview` is updated (maybe this could be cleaned up
    // with  reducers, but not completely sure...).
    // anyway, we probably need a real simple solution for this kind of problems
    const sessionsOverview = this.como.project.get('sessionsOverview'); // the initialisation step is the more tricky...

    const createdStateIds = new Set(sessionsOverview.map(s => s.stateId));
    const notifiedStateIds = new Set();

    const notifySessionCreation = () => {
      const sessionsOverview = this.como.project.get('sessionsOverview');
      createdStateIds.forEach(stateId => {
        sessionsOverview.forEach(overview => {
          if (overview.stateId === stateId) {
            notifiedStateIds.add(stateId);
            createdStateIds.delete(stateId);
            callback(overview.id);
          }
        });
      });
    };

    const unobserve = this.como.client.stateManager.observe((schemaName, stateId, nodeId) => {
      if (schemaName === 'session') {
        // if the session has not been notified at initialization step
        if (!notifiedStateIds.has(stateId)) {
          createdStateIds.add(stateId);
        }
      }
    });
    const unsubscribe = this.como.project.subscribe(updates => {
      if ('sessionsOverview' in updates) {
        notifySessionCreation();
      }
    }); // notify with already existing sessions

    notifySessionCreation();
    return unsubscribe;
  }

  async attach(sessionId) {
    const sessionsOverview = this.como.project.get('sessionsOverview');
    const overview = sessionsOverview.find(s => s.id === sessionId);

    if (overview) {
      const sessionState = await this.como.client.stateManager.attach(`session`, overview.stateId);
      const session = new _Session.default(this.como, sessionState);
      await session.init();
      return session;
    } else {
      return null;
    }
  }

}

var _default = Sessions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnQvU2Vzc2lvbnMuanMiXSwibmFtZXMiOlsiU2Vzc2lvbnMiLCJjb25zdHJ1Y3RvciIsImNvbW8iLCJvYnNlcnZlIiwiY2FsbGJhY2siLCJzZXNzaW9uc092ZXJ2aWV3IiwicHJvamVjdCIsImdldCIsImNyZWF0ZWRTdGF0ZUlkcyIsIlNldCIsIm1hcCIsInMiLCJzdGF0ZUlkIiwibm90aWZpZWRTdGF0ZUlkcyIsIm5vdGlmeVNlc3Npb25DcmVhdGlvbiIsImZvckVhY2giLCJvdmVydmlldyIsImFkZCIsImRlbGV0ZSIsImlkIiwidW5vYnNlcnZlIiwiY2xpZW50Iiwic3RhdGVNYW5hZ2VyIiwic2NoZW1hTmFtZSIsIm5vZGVJZCIsImhhcyIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwidXBkYXRlcyIsImF0dGFjaCIsInNlc3Npb25JZCIsImZpbmQiLCJzZXNzaW9uU3RhdGUiLCJzZXNzaW9uIiwiU2Vzc2lvbiIsImluaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLFFBQU4sQ0FBZTtBQUNiQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBTztBQUNoQixTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFREMsRUFBQUEsT0FBTyxDQUFDQyxRQUFELEVBQVc7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFNQyxnQkFBZ0IsR0FBRyxLQUFLSCxJQUFMLENBQVVJLE9BQVYsQ0FBa0JDLEdBQWxCLENBQXNCLGtCQUF0QixDQUF6QixDQUxnQixDQU1oQjs7QUFDQSxVQUFNQyxlQUFlLEdBQUcsSUFBSUMsR0FBSixDQUFRSixnQkFBZ0IsQ0FBQ0ssR0FBakIsQ0FBcUJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxPQUE1QixDQUFSLENBQXhCO0FBQ0EsVUFBTUMsZ0JBQWdCLEdBQUcsSUFBSUosR0FBSixFQUF6Qjs7QUFFQSxVQUFNSyxxQkFBcUIsR0FBRyxNQUFNO0FBQ2xDLFlBQU1ULGdCQUFnQixHQUFHLEtBQUtILElBQUwsQ0FBVUksT0FBVixDQUFrQkMsR0FBbEIsQ0FBc0Isa0JBQXRCLENBQXpCO0FBRUFDLE1BQUFBLGVBQWUsQ0FBQ08sT0FBaEIsQ0FBd0JILE9BQU8sSUFBSTtBQUNqQ1AsUUFBQUEsZ0JBQWdCLENBQUNVLE9BQWpCLENBQXlCQyxRQUFRLElBQUk7QUFDbkMsY0FBSUEsUUFBUSxDQUFDSixPQUFULEtBQXFCQSxPQUF6QixFQUFrQztBQUNoQ0MsWUFBQUEsZ0JBQWdCLENBQUNJLEdBQWpCLENBQXFCTCxPQUFyQjtBQUNBSixZQUFBQSxlQUFlLENBQUNVLE1BQWhCLENBQXVCTixPQUF2QjtBQUVBUixZQUFBQSxRQUFRLENBQUNZLFFBQVEsQ0FBQ0csRUFBVixDQUFSO0FBQ0Q7QUFDRixTQVBEO0FBUUQsT0FURDtBQVVELEtBYkQ7O0FBZUEsVUFBTUMsU0FBUyxHQUFHLEtBQUtsQixJQUFMLENBQVVtQixNQUFWLENBQWlCQyxZQUFqQixDQUE4Qm5CLE9BQTlCLENBQXNDLENBQUNvQixVQUFELEVBQWFYLE9BQWIsRUFBc0JZLE1BQXRCLEtBQWlDO0FBQ3ZGLFVBQUlELFVBQVUsS0FBSyxTQUFuQixFQUE4QjtBQUM1QjtBQUNBLFlBQUksQ0FBQ1YsZ0JBQWdCLENBQUNZLEdBQWpCLENBQXFCYixPQUFyQixDQUFMLEVBQW9DO0FBQ2xDSixVQUFBQSxlQUFlLENBQUNTLEdBQWhCLENBQW9CTCxPQUFwQjtBQUNEO0FBQ0Y7QUFDRixLQVBpQixDQUFsQjtBQVNBLFVBQU1jLFdBQVcsR0FBRyxLQUFLeEIsSUFBTCxDQUFVSSxPQUFWLENBQWtCcUIsU0FBbEIsQ0FBNEJDLE9BQU8sSUFBSTtBQUN6RCxVQUFJLHNCQUFzQkEsT0FBMUIsRUFBbUM7QUFDakNkLFFBQUFBLHFCQUFxQjtBQUN0QjtBQUNGLEtBSm1CLENBQXBCLENBbENnQixDQXdDaEI7O0FBQ0FBLElBQUFBLHFCQUFxQjtBQUVyQixXQUFPWSxXQUFQO0FBQ0Q7O0FBRVcsUUFBTkcsTUFBTSxDQUFDQyxTQUFELEVBQVk7QUFDdEIsVUFBTXpCLGdCQUFnQixHQUFHLEtBQUtILElBQUwsQ0FBVUksT0FBVixDQUFrQkMsR0FBbEIsQ0FBc0Isa0JBQXRCLENBQXpCO0FBQ0EsVUFBTVMsUUFBUSxHQUFHWCxnQkFBZ0IsQ0FBQzBCLElBQWpCLENBQXNCcEIsQ0FBQyxJQUFJQSxDQUFDLENBQUNRLEVBQUYsS0FBU1csU0FBcEMsQ0FBakI7O0FBRUEsUUFBSWQsUUFBSixFQUFjO0FBQ1osWUFBTWdCLFlBQVksR0FBRyxNQUFNLEtBQUs5QixJQUFMLENBQVVtQixNQUFWLENBQWlCQyxZQUFqQixDQUE4Qk8sTUFBOUIsQ0FBc0MsU0FBdEMsRUFBZ0RiLFFBQVEsQ0FBQ0osT0FBekQsQ0FBM0I7QUFDQSxZQUFNcUIsT0FBTyxHQUFHLElBQUlDLGdCQUFKLENBQVksS0FBS2hDLElBQWpCLEVBQXVCOEIsWUFBdkIsQ0FBaEI7QUFDQSxZQUFNQyxPQUFPLENBQUNFLElBQVIsRUFBTjtBQUVBLGFBQU9GLE9BQVA7QUFDRCxLQU5ELE1BTU87QUFDTCxhQUFPLElBQVA7QUFDRDtBQUNGOztBQWhFWTs7ZUFtRUFqQyxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNlc3Npb24gZnJvbSAnLi9TZXNzaW9uJztcblxuY2xhc3MgU2Vzc2lvbnMge1xuICBjb25zdHJ1Y3Rvcihjb21vKSB7XG4gICAgdGhpcy5jb21vID0gY29tbztcbiAgfVxuXG4gIG9ic2VydmUoY2FsbGJhY2spIHtcbiAgICAvLyBAbm90ZSAtIHdlIG5lZWQgdGhpcyBjb252b2x1dGVkIHN0dWZmIGJlY2F1c2UgdGhlIHN0YXRlIGl0c2VsZiBpcyBjcmVhdGVkXG4gICAgLy8gYmVmb3JlIHRoZSBgc2Vzc2lvbk92ZXJ2aWV3YCBpcyB1cGRhdGVkIChtYXliZSB0aGlzIGNvdWxkIGJlIGNsZWFuZWQgdXBcbiAgICAvLyB3aXRoICByZWR1Y2VycywgYnV0IG5vdCBjb21wbGV0ZWx5IHN1cmUuLi4pLlxuICAgIC8vIGFueXdheSwgd2UgcHJvYmFibHkgbmVlZCBhIHJlYWwgc2ltcGxlIHNvbHV0aW9uIGZvciB0aGlzIGtpbmQgb2YgcHJvYmxlbXNcbiAgICBjb25zdCBzZXNzaW9uc092ZXJ2aWV3ID0gdGhpcy5jb21vLnByb2plY3QuZ2V0KCdzZXNzaW9uc092ZXJ2aWV3Jyk7XG4gICAgLy8gdGhlIGluaXRpYWxpc2F0aW9uIHN0ZXAgaXMgdGhlIG1vcmUgdHJpY2t5Li4uXG4gICAgY29uc3QgY3JlYXRlZFN0YXRlSWRzID0gbmV3IFNldChzZXNzaW9uc092ZXJ2aWV3Lm1hcChzID0+IHMuc3RhdGVJZCkpO1xuICAgIGNvbnN0IG5vdGlmaWVkU3RhdGVJZHMgPSBuZXcgU2V0KCk7XG5cbiAgICBjb25zdCBub3RpZnlTZXNzaW9uQ3JlYXRpb24gPSAoKSA9PiB7XG4gICAgICBjb25zdCBzZXNzaW9uc092ZXJ2aWV3ID0gdGhpcy5jb21vLnByb2plY3QuZ2V0KCdzZXNzaW9uc092ZXJ2aWV3Jyk7XG5cbiAgICAgIGNyZWF0ZWRTdGF0ZUlkcy5mb3JFYWNoKHN0YXRlSWQgPT4ge1xuICAgICAgICBzZXNzaW9uc092ZXJ2aWV3LmZvckVhY2gob3ZlcnZpZXcgPT4ge1xuICAgICAgICAgIGlmIChvdmVydmlldy5zdGF0ZUlkID09PSBzdGF0ZUlkKSB7XG4gICAgICAgICAgICBub3RpZmllZFN0YXRlSWRzLmFkZChzdGF0ZUlkKTtcbiAgICAgICAgICAgIGNyZWF0ZWRTdGF0ZUlkcy5kZWxldGUoc3RhdGVJZCk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKG92ZXJ2aWV3LmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgdW5vYnNlcnZlID0gdGhpcy5jb21vLmNsaWVudC5zdGF0ZU1hbmFnZXIub2JzZXJ2ZSgoc2NoZW1hTmFtZSwgc3RhdGVJZCwgbm9kZUlkKSA9PiB7XG4gICAgICBpZiAoc2NoZW1hTmFtZSA9PT0gJ3Nlc3Npb24nKSB7XG4gICAgICAgIC8vIGlmIHRoZSBzZXNzaW9uIGhhcyBub3QgYmVlbiBub3RpZmllZCBhdCBpbml0aWFsaXphdGlvbiBzdGVwXG4gICAgICAgIGlmICghbm90aWZpZWRTdGF0ZUlkcy5oYXMoc3RhdGVJZCkpIHtcbiAgICAgICAgICBjcmVhdGVkU3RhdGVJZHMuYWRkKHN0YXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IHRoaXMuY29tby5wcm9qZWN0LnN1YnNjcmliZSh1cGRhdGVzID0+IHtcbiAgICAgIGlmICgnc2Vzc2lvbnNPdmVydmlldycgaW4gdXBkYXRlcykge1xuICAgICAgICBub3RpZnlTZXNzaW9uQ3JlYXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIG5vdGlmeSB3aXRoIGFscmVhZHkgZXhpc3Rpbmcgc2Vzc2lvbnNcbiAgICBub3RpZnlTZXNzaW9uQ3JlYXRpb24oKTtcblxuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfVxuXG4gIGFzeW5jIGF0dGFjaChzZXNzaW9uSWQpIHtcbiAgICBjb25zdCBzZXNzaW9uc092ZXJ2aWV3ID0gdGhpcy5jb21vLnByb2plY3QuZ2V0KCdzZXNzaW9uc092ZXJ2aWV3Jyk7XG4gICAgY29uc3Qgb3ZlcnZpZXcgPSBzZXNzaW9uc092ZXJ2aWV3LmZpbmQocyA9PiBzLmlkID09PSBzZXNzaW9uSWQpO1xuXG4gICAgaWYgKG92ZXJ2aWV3KSB7XG4gICAgICBjb25zdCBzZXNzaW9uU3RhdGUgPSBhd2FpdCB0aGlzLmNvbW8uY2xpZW50LnN0YXRlTWFuYWdlci5hdHRhY2goYHNlc3Npb25gLCBvdmVydmlldy5zdGF0ZUlkKTtcbiAgICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgU2Vzc2lvbih0aGlzLmNvbW8sIHNlc3Npb25TdGF0ZSk7XG4gICAgICBhd2FpdCBzZXNzaW9uLmluaXQoKTtcblxuICAgICAgcmV0dXJuIHNlc3Npb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZXNzaW9ucztcbiJdfQ==