"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _AudioModule = _interopRequireDefault(require("./AudioModule.js"));

var _helpers = _interopRequireDefault(require("../helpers"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AudioDestination extends _AudioModule.default {
  constructor(graph, type, id, options) {
    options = Object.assign({
      volume: 0,
      mute: false,
      pan: 0
    }, options);
    super(graph, type, id, options); // const now = this.audioContext.currentTime;
    // const volumeGain = helpers.math.decibelToLinear(options.volume);
    // const muteGain = options.mute ? 0 : 1;

    this.audioOutNode.connect(this.graph.como.audioMaster); // recycle existing passThroughIn and passThroughOut nodes
    // @todo - panning, use splitter and merger for Safari

    this.mute = this.passThroughInNode;
    this.volume = this.passThroughOutNode;
    this.mute.connect(this.volume);

    this._updateVolume(this.options.volume);

    this._updateMute(this.options.mute);
  }

  destroy() {
    this.volume.disconnect();
    this.mute.disconnect();
  }

  connect() {
    // cannot be connected on another module
    throw new Error(`AudioDestination module cannot be connected to another module`);
  }

  updateOptions(options) {
    // do not call super to prevent default `AudioModule` bypass behavior
    this.options = Object.assign(this.options, options);

    this._updateVolume(this.options.volume);

    this._updateMute(this.options.mute);
  }

  _updateVolume(value) {
    const gain = _helpers.default.math.decibelToLinear(value);

    const now = this.audioContext.currentTime;
    this.volume.gain.cancelScheduledValues(now);
    this.volume.gain.setTargetAtTime(gain, now, 0.001);
  }

  _updateMute(value) {
    const gain = value ? 0 : 1;
    const now = this.audioContext.currentTime;
    this.mute.gain.cancelScheduledValues(now);
    this.mute.gain.setTargetAtTime(gain, now, 0.005);
  }

}

var _default = AudioDestination;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQvbW9kdWxlcy9BdWRpb0Rlc3RpbmF0aW9uLmpzIl0sIm5hbWVzIjpbIkF1ZGlvRGVzdGluYXRpb24iLCJBdWRpb01vZHVsZSIsImNvbnN0cnVjdG9yIiwiZ3JhcGgiLCJ0eXBlIiwiaWQiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwidm9sdW1lIiwibXV0ZSIsInBhbiIsImF1ZGlvT3V0Tm9kZSIsImNvbm5lY3QiLCJjb21vIiwiYXVkaW9NYXN0ZXIiLCJwYXNzVGhyb3VnaEluTm9kZSIsInBhc3NUaHJvdWdoT3V0Tm9kZSIsIl91cGRhdGVWb2x1bWUiLCJfdXBkYXRlTXV0ZSIsImRlc3Ryb3kiLCJkaXNjb25uZWN0IiwiRXJyb3IiLCJ1cGRhdGVPcHRpb25zIiwidmFsdWUiLCJnYWluIiwiaGVscGVycyIsIm1hdGgiLCJkZWNpYmVsVG9MaW5lYXIiLCJub3ciLCJhdWRpb0NvbnRleHQiLCJjdXJyZW50VGltZSIsImNhbmNlbFNjaGVkdWxlZFZhbHVlcyIsInNldFRhcmdldEF0VGltZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsZ0JBQU4sU0FBK0JDLG9CQUEvQixDQUEyQztBQUN6Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVFDLElBQVIsRUFBY0MsRUFBZCxFQUFrQkMsT0FBbEIsRUFBMkI7QUFDcENBLElBQUFBLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFBRUMsTUFBQUEsTUFBTSxFQUFFLENBQVY7QUFBYUMsTUFBQUEsSUFBSSxFQUFFLEtBQW5CO0FBQTBCQyxNQUFBQSxHQUFHLEVBQUU7QUFBL0IsS0FBZCxFQUFrREwsT0FBbEQsQ0FBVjtBQUVBLFVBQU1ILEtBQU4sRUFBYUMsSUFBYixFQUFtQkMsRUFBbkIsRUFBdUJDLE9BQXZCLEVBSG9DLENBS3BDO0FBQ0E7QUFDQTs7QUFFQSxTQUFLTSxZQUFMLENBQWtCQyxPQUFsQixDQUEwQixLQUFLVixLQUFMLENBQVdXLElBQVgsQ0FBZ0JDLFdBQTFDLEVBVG9DLENBVXBDO0FBQ0E7O0FBQ0EsU0FBS0wsSUFBTCxHQUFZLEtBQUtNLGlCQUFqQjtBQUNBLFNBQUtQLE1BQUwsR0FBYyxLQUFLUSxrQkFBbkI7QUFDQSxTQUFLUCxJQUFMLENBQVVHLE9BQVYsQ0FBa0IsS0FBS0osTUFBdkI7O0FBRUEsU0FBS1MsYUFBTCxDQUFtQixLQUFLWixPQUFMLENBQWFHLE1BQWhDOztBQUNBLFNBQUtVLFdBQUwsQ0FBaUIsS0FBS2IsT0FBTCxDQUFhSSxJQUE5QjtBQUNEOztBQUVEVSxFQUFBQSxPQUFPLEdBQUc7QUFDUixTQUFLWCxNQUFMLENBQVlZLFVBQVo7QUFDQSxTQUFLWCxJQUFMLENBQVVXLFVBQVY7QUFDRDs7QUFFRFIsRUFBQUEsT0FBTyxHQUFHO0FBQ1I7QUFDQSxVQUFNLElBQUlTLEtBQUosQ0FBVywrREFBWCxDQUFOO0FBQ0Q7O0FBRURDLEVBQUFBLGFBQWEsQ0FBQ2pCLE9BQUQsRUFBVTtBQUNyQjtBQUNBLFNBQUtBLE9BQUwsR0FBZUMsTUFBTSxDQUFDQyxNQUFQLENBQWMsS0FBS0YsT0FBbkIsRUFBNEJBLE9BQTVCLENBQWY7O0FBRUEsU0FBS1ksYUFBTCxDQUFtQixLQUFLWixPQUFMLENBQWFHLE1BQWhDOztBQUNBLFNBQUtVLFdBQUwsQ0FBaUIsS0FBS2IsT0FBTCxDQUFhSSxJQUE5QjtBQUNEOztBQUVEUSxFQUFBQSxhQUFhLENBQUNNLEtBQUQsRUFBUTtBQUNuQixVQUFNQyxJQUFJLEdBQUdDLGlCQUFRQyxJQUFSLENBQWFDLGVBQWIsQ0FBNkJKLEtBQTdCLENBQWI7O0FBQ0EsVUFBTUssR0FBRyxHQUFHLEtBQUtDLFlBQUwsQ0FBa0JDLFdBQTlCO0FBRUEsU0FBS3RCLE1BQUwsQ0FBWWdCLElBQVosQ0FBaUJPLHFCQUFqQixDQUF1Q0gsR0FBdkM7QUFDQSxTQUFLcEIsTUFBTCxDQUFZZ0IsSUFBWixDQUFpQlEsZUFBakIsQ0FBaUNSLElBQWpDLEVBQXVDSSxHQUF2QyxFQUE0QyxLQUE1QztBQUNEOztBQUVEVixFQUFBQSxXQUFXLENBQUNLLEtBQUQsRUFBUTtBQUNqQixVQUFNQyxJQUFJLEdBQUdELEtBQUssR0FBRyxDQUFILEdBQU8sQ0FBekI7QUFDQSxVQUFNSyxHQUFHLEdBQUcsS0FBS0MsWUFBTCxDQUFrQkMsV0FBOUI7QUFFQSxTQUFLckIsSUFBTCxDQUFVZSxJQUFWLENBQWVPLHFCQUFmLENBQXFDSCxHQUFyQztBQUNBLFNBQUtuQixJQUFMLENBQVVlLElBQVYsQ0FBZVEsZUFBZixDQUErQlIsSUFBL0IsRUFBcUNJLEdBQXJDLEVBQTBDLEtBQTFDO0FBQ0Q7O0FBckR3Qzs7ZUF5RDVCN0IsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXVkaW9Nb2R1bGUgZnJvbSAnLi9BdWRpb01vZHVsZS5qcyc7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuLi9oZWxwZXJzJztcblxuY2xhc3MgQXVkaW9EZXN0aW5hdGlvbiBleHRlbmRzIEF1ZGlvTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoZ3JhcGgsIHR5cGUsIGlkLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyB2b2x1bWU6IDAsIG11dGU6IGZhbHNlLCBwYW46IDAgfSwgb3B0aW9ucyk7XG5cbiAgICBzdXBlcihncmFwaCwgdHlwZSwgaWQsIG9wdGlvbnMpO1xuXG4gICAgLy8gY29uc3Qgbm93ID0gdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG4gICAgLy8gY29uc3Qgdm9sdW1lR2FpbiA9IGhlbHBlcnMubWF0aC5kZWNpYmVsVG9MaW5lYXIob3B0aW9ucy52b2x1bWUpO1xuICAgIC8vIGNvbnN0IG11dGVHYWluID0gb3B0aW9ucy5tdXRlID8gMCA6IDE7XG5cbiAgICB0aGlzLmF1ZGlvT3V0Tm9kZS5jb25uZWN0KHRoaXMuZ3JhcGguY29tby5hdWRpb01hc3Rlcik7XG4gICAgLy8gcmVjeWNsZSBleGlzdGluZyBwYXNzVGhyb3VnaEluIGFuZCBwYXNzVGhyb3VnaE91dCBub2Rlc1xuICAgIC8vIEB0b2RvIC0gcGFubmluZywgdXNlIHNwbGl0dGVyIGFuZCBtZXJnZXIgZm9yIFNhZmFyaVxuICAgIHRoaXMubXV0ZSA9IHRoaXMucGFzc1Rocm91Z2hJbk5vZGU7XG4gICAgdGhpcy52b2x1bWUgPSB0aGlzLnBhc3NUaHJvdWdoT3V0Tm9kZTtcbiAgICB0aGlzLm11dGUuY29ubmVjdCh0aGlzLnZvbHVtZSk7XG5cbiAgICB0aGlzLl91cGRhdGVWb2x1bWUodGhpcy5vcHRpb25zLnZvbHVtZSk7XG4gICAgdGhpcy5fdXBkYXRlTXV0ZSh0aGlzLm9wdGlvbnMubXV0ZSk7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMudm9sdW1lLmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLm11dGUuZGlzY29ubmVjdCgpO1xuICB9XG5cbiAgY29ubmVjdCgpIHtcbiAgICAvLyBjYW5ub3QgYmUgY29ubmVjdGVkIG9uIGFub3RoZXIgbW9kdWxlXG4gICAgdGhyb3cgbmV3IEVycm9yKGBBdWRpb0Rlc3RpbmF0aW9uIG1vZHVsZSBjYW5ub3QgYmUgY29ubmVjdGVkIHRvIGFub3RoZXIgbW9kdWxlYCk7XG4gIH1cblxuICB1cGRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAvLyBkbyBub3QgY2FsbCBzdXBlciB0byBwcmV2ZW50IGRlZmF1bHQgYEF1ZGlvTW9kdWxlYCBieXBhc3MgYmVoYXZpb3JcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl91cGRhdGVWb2x1bWUodGhpcy5vcHRpb25zLnZvbHVtZSk7XG4gICAgdGhpcy5fdXBkYXRlTXV0ZSh0aGlzLm9wdGlvbnMubXV0ZSk7XG4gIH1cblxuICBfdXBkYXRlVm9sdW1lKHZhbHVlKSB7XG4gICAgY29uc3QgZ2FpbiA9IGhlbHBlcnMubWF0aC5kZWNpYmVsVG9MaW5lYXIodmFsdWUpO1xuICAgIGNvbnN0IG5vdyA9IHRoaXMuYXVkaW9Db250ZXh0LmN1cnJlbnRUaW1lO1xuXG4gICAgdGhpcy52b2x1bWUuZ2Fpbi5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMobm93KTtcbiAgICB0aGlzLnZvbHVtZS5nYWluLnNldFRhcmdldEF0VGltZShnYWluLCBub3csIDAuMDAxKTtcbiAgfVxuXG4gIF91cGRhdGVNdXRlKHZhbHVlKSB7XG4gICAgY29uc3QgZ2FpbiA9IHZhbHVlID8gMCA6IDE7XG4gICAgY29uc3Qgbm93ID0gdGhpcy5hdWRpb0NvbnRleHQuY3VycmVudFRpbWU7XG5cbiAgICB0aGlzLm11dGUuZ2Fpbi5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMobm93KTtcbiAgICB0aGlzLm11dGUuZ2Fpbi5zZXRUYXJnZXRBdFRpbWUoZ2Fpbiwgbm93LCAwLjAwNSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBdWRpb0Rlc3RpbmF0aW9uO1xuIl19