"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _devicemotion = _interopRequireDefault(require("@ircam/devicemotion"));

var _BaseSource = _interopRequireDefault(require("../../common/sources/BaseSource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DeviceMotion extends _BaseSource.default {
  constructor(como, streamId = null) {
    super();

    if (!como.hasDeviceMotion) {
      throw new Error('DeviceMotion source requires access to the device motion API');
    }

    if (streamId === null) {
      throw new Error('DeviceMotion source requires a streamId');
    }

    this.como = como;
    this.streamId = streamId;
    this.data = {
      metas: {},
      accelerationIncludingGravity: {},
      rotationRate: {}
    };
    this.process = this.process.bind(this);
  }

  addListener(callback) {
    super.addListener(callback);

    if (this.listeners.size === 1) {
      _devicemotion.default.addEventListener(this.process);
    }
  }

  removeListener(callback) {
    super.removeListener(callback);

    if (this.listeners.size === 0) {
      _devicemotion.default.removeEventListener(this.process);
    }
  }

  process(e) {
    const syncTime = this.como.experience.plugins['sync'].getSyncTime(); // metas

    this.data.metas.id = this.streamId;
    this.data.metas.time = syncTime;
    this.data.metas.period = e.interval / 1000; // acceleration

    this.data.accelerationIncludingGravity.x = e.accelerationIncludingGravity.x;
    this.data.accelerationIncludingGravity.y = e.accelerationIncludingGravity.y;
    this.data.accelerationIncludingGravity.z = e.accelerationIncludingGravity.z; // rotation

    this.data.rotationRate.alpha = e.rotationRate.alpha;
    this.data.rotationRate.beta = e.rotationRate.beta;
    this.data.rotationRate.gamma = e.rotationRate.gamma;
    this.emit(this.data);
  }

}

var _default = DeviceMotion;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGllbnQvc291cmNlcy9EZXZpY2VNb3Rpb24uanMiXSwibmFtZXMiOlsiRGV2aWNlTW90aW9uIiwiQmFzZVNvdXJjZSIsImNvbnN0cnVjdG9yIiwiY29tbyIsInN0cmVhbUlkIiwiaGFzRGV2aWNlTW90aW9uIiwiRXJyb3IiLCJkYXRhIiwibWV0YXMiLCJhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Iiwicm90YXRpb25SYXRlIiwicHJvY2VzcyIsImJpbmQiLCJhZGRMaXN0ZW5lciIsImNhbGxiYWNrIiwibGlzdGVuZXJzIiwic2l6ZSIsImRldmljZW1vdGlvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlIiwic3luY1RpbWUiLCJleHBlcmllbmNlIiwicGx1Z2lucyIsImdldFN5bmNUaW1lIiwiaWQiLCJ0aW1lIiwicGVyaW9kIiwiaW50ZXJ2YWwiLCJ4IiwieSIsInoiLCJhbHBoYSIsImJldGEiLCJnYW1tYSIsImVtaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFlBQU4sU0FBMkJDLG1CQUEzQixDQUFzQztBQUNwQ0MsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU9DLFFBQVEsR0FBRyxJQUFsQixFQUF3QjtBQUNqQzs7QUFFQSxRQUFJLENBQUNELElBQUksQ0FBQ0UsZUFBVixFQUEyQjtBQUN6QixZQUFNLElBQUlDLEtBQUosQ0FBVSw4REFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUYsUUFBUSxLQUFLLElBQWpCLEVBQXVCO0FBQ3JCLFlBQU0sSUFBSUUsS0FBSixDQUFVLHlDQUFWLENBQU47QUFDRDs7QUFFRCxTQUFLSCxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUVBLFNBQUtHLElBQUwsR0FBWTtBQUNWQyxNQUFBQSxLQUFLLEVBQUUsRUFERztBQUVWQyxNQUFBQSw0QkFBNEIsRUFBRSxFQUZwQjtBQUdWQyxNQUFBQSxZQUFZLEVBQUU7QUFISixLQUFaO0FBTUEsU0FBS0MsT0FBTCxHQUFlLEtBQUtBLE9BQUwsQ0FBYUMsSUFBYixDQUFrQixJQUFsQixDQUFmO0FBQ0Q7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXO0FBQ3BCLFVBQU1ELFdBQU4sQ0FBa0JDLFFBQWxCOztBQUVBLFFBQUksS0FBS0MsU0FBTCxDQUFlQyxJQUFmLEtBQXdCLENBQTVCLEVBQStCO0FBQzdCQyw0QkFBYUMsZ0JBQWIsQ0FBOEIsS0FBS1AsT0FBbkM7QUFDRDtBQUNGOztBQUVEUSxFQUFBQSxjQUFjLENBQUNMLFFBQUQsRUFBVztBQUN2QixVQUFNSyxjQUFOLENBQXFCTCxRQUFyQjs7QUFFQSxRQUFJLEtBQUtDLFNBQUwsQ0FBZUMsSUFBZixLQUF3QixDQUE1QixFQUErQjtBQUM3QkMsNEJBQWFHLG1CQUFiLENBQWlDLEtBQUtULE9BQXRDO0FBQ0Q7QUFDRjs7QUFFREEsRUFBQUEsT0FBTyxDQUFDVSxDQUFELEVBQUk7QUFDVCxVQUFNQyxRQUFRLEdBQUcsS0FBS25CLElBQUwsQ0FBVW9CLFVBQVYsQ0FBcUJDLE9BQXJCLENBQTZCLE1BQTdCLEVBQXFDQyxXQUFyQyxFQUFqQixDQURTLENBR1Q7O0FBQ0EsU0FBS2xCLElBQUwsQ0FBVUMsS0FBVixDQUFnQmtCLEVBQWhCLEdBQXFCLEtBQUt0QixRQUExQjtBQUNBLFNBQUtHLElBQUwsQ0FBVUMsS0FBVixDQUFnQm1CLElBQWhCLEdBQXVCTCxRQUF2QjtBQUNBLFNBQUtmLElBQUwsQ0FBVUMsS0FBVixDQUFnQm9CLE1BQWhCLEdBQXlCUCxDQUFDLENBQUNRLFFBQUYsR0FBYSxJQUF0QyxDQU5TLENBT1Q7O0FBQ0EsU0FBS3RCLElBQUwsQ0FBVUUsNEJBQVYsQ0FBdUNxQixDQUF2QyxHQUEyQ1QsQ0FBQyxDQUFDWiw0QkFBRixDQUErQnFCLENBQTFFO0FBQ0EsU0FBS3ZCLElBQUwsQ0FBVUUsNEJBQVYsQ0FBdUNzQixDQUF2QyxHQUEyQ1YsQ0FBQyxDQUFDWiw0QkFBRixDQUErQnNCLENBQTFFO0FBQ0EsU0FBS3hCLElBQUwsQ0FBVUUsNEJBQVYsQ0FBdUN1QixDQUF2QyxHQUEyQ1gsQ0FBQyxDQUFDWiw0QkFBRixDQUErQnVCLENBQTFFLENBVlMsQ0FXVDs7QUFDQSxTQUFLekIsSUFBTCxDQUFVRyxZQUFWLENBQXVCdUIsS0FBdkIsR0FBK0JaLENBQUMsQ0FBQ1gsWUFBRixDQUFldUIsS0FBOUM7QUFDQSxTQUFLMUIsSUFBTCxDQUFVRyxZQUFWLENBQXVCd0IsSUFBdkIsR0FBOEJiLENBQUMsQ0FBQ1gsWUFBRixDQUFld0IsSUFBN0M7QUFDQSxTQUFLM0IsSUFBTCxDQUFVRyxZQUFWLENBQXVCeUIsS0FBdkIsR0FBK0JkLENBQUMsQ0FBQ1gsWUFBRixDQUFleUIsS0FBOUM7QUFFQSxTQUFLQyxJQUFMLENBQVUsS0FBSzdCLElBQWY7QUFDRDs7QUF6RG1DOztlQTREdkJQLFkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGV2aWNlbW90aW9uIGZyb20gJ0BpcmNhbS9kZXZpY2Vtb3Rpb24nO1xuaW1wb3J0IEJhc2VTb3VyY2UgZnJvbSAnLi4vLi4vY29tbW9uL3NvdXJjZXMvQmFzZVNvdXJjZSc7XG5cbmNsYXNzIERldmljZU1vdGlvbiBleHRlbmRzIEJhc2VTb3VyY2Uge1xuICBjb25zdHJ1Y3Rvcihjb21vLCBzdHJlYW1JZCA9IG51bGwpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKCFjb21vLmhhc0RldmljZU1vdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZXZpY2VNb3Rpb24gc291cmNlIHJlcXVpcmVzIGFjY2VzcyB0byB0aGUgZGV2aWNlIG1vdGlvbiBBUEknKTtcbiAgICB9XG5cbiAgICBpZiAoc3RyZWFtSWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRGV2aWNlTW90aW9uIHNvdXJjZSByZXF1aXJlcyBhIHN0cmVhbUlkJyk7XG4gICAgfVxuXG4gICAgdGhpcy5jb21vID0gY29tbztcbiAgICB0aGlzLnN0cmVhbUlkID0gc3RyZWFtSWQ7XG5cbiAgICB0aGlzLmRhdGEgPSB7XG4gICAgICBtZXRhczoge30sXG4gICAgICBhY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5OiB7fSxcbiAgICAgIHJvdGF0aW9uUmF0ZToge30sXG4gICAgfTtcblxuICAgIHRoaXMucHJvY2VzcyA9IHRoaXMucHJvY2Vzcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgYWRkTGlzdGVuZXIoY2FsbGJhY2spIHtcbiAgICBzdXBlci5hZGRMaXN0ZW5lcihjYWxsYmFjayk7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgZGV2aWNlbW90aW9uLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5wcm9jZXNzKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgIHN1cGVyLnJlbW92ZUxpc3RlbmVyKGNhbGxiYWNrKTtcblxuICAgIGlmICh0aGlzLmxpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICBkZXZpY2Vtb3Rpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLnByb2Nlc3MpO1xuICAgIH1cbiAgfVxuXG4gIHByb2Nlc3MoZSkge1xuICAgIGNvbnN0IHN5bmNUaW1lID0gdGhpcy5jb21vLmV4cGVyaWVuY2UucGx1Z2luc1snc3luYyddLmdldFN5bmNUaW1lKCk7XG5cbiAgICAvLyBtZXRhc1xuICAgIHRoaXMuZGF0YS5tZXRhcy5pZCA9IHRoaXMuc3RyZWFtSWQ7XG4gICAgdGhpcy5kYXRhLm1ldGFzLnRpbWUgPSBzeW5jVGltZTtcbiAgICB0aGlzLmRhdGEubWV0YXMucGVyaW9kID0gZS5pbnRlcnZhbCAvIDEwMDA7XG4gICAgLy8gYWNjZWxlcmF0aW9uXG4gICAgdGhpcy5kYXRhLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueCA9IGUuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54O1xuICAgIHRoaXMuZGF0YS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5LnkgPSBlLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueTtcbiAgICB0aGlzLmRhdGEuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS56ID0gZS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lno7XG4gICAgLy8gcm90YXRpb25cbiAgICB0aGlzLmRhdGEucm90YXRpb25SYXRlLmFscGhhID0gZS5yb3RhdGlvblJhdGUuYWxwaGE7XG4gICAgdGhpcy5kYXRhLnJvdGF0aW9uUmF0ZS5iZXRhID0gZS5yb3RhdGlvblJhdGUuYmV0YTtcbiAgICB0aGlzLmRhdGEucm90YXRpb25SYXRlLmdhbW1hID0gZS5yb3RhdGlvblJhdGUuZ2FtbWE7XG5cbiAgICB0aGlzLmVtaXQodGhpcy5kYXRhKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBEZXZpY2VNb3Rpb247XG4iXX0=