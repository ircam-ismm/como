"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _client = _interopRequireDefault(require("@soundworks/plugin-filesystem/client"));

var _client2 = _interopRequireDefault(require("@soundworks/plugin-platform/client"));

var _client3 = _interopRequireDefault(require("@soundworks/plugin-checkin/client"));

var _client4 = _interopRequireDefault(require("@soundworks/plugin-audio-buffer-loader/client"));

var _client5 = _interopRequireDefault(require("@soundworks/plugin-sync/client"));

var _client6 = _interopRequireDefault(require("@soundworks/plugin-scripting/client"));

var _client7 = _interopRequireDefault(require("@soundworks/plugin-logger/client"));

var _devicemotion = _interopRequireDefault(require("@ircam/devicemotion"));

var _index = _interopRequireDefault(require("./modules/index.js"));

var _index2 = _interopRequireDefault(require("./sources/index.js"));

var _index3 = _interopRequireDefault(require("./helpers/index.js"));

var _Project = _interopRequireDefault(require("./Project.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import path from 'path';
class CoMo {
  constructor(soundworksClient, audioContext = null) {
    // expose constructors of available sources and nodes
    this.sources = _index2.default;
    this.modules = _index.default;
    this.helpers = _index3.default; // register device motion feature

    _client2.default.addFeatureDefinition({
      id: 'devicemotion',
      initialize: async () => {
        const result = await _devicemotion.default.requestPermission();
        this.hasDeviceMotion = result === 'granted' ? true : false; // always return `true` as we don't want to block the application at
        // this point, this must be the application responsibility to display
        // an error message if the client requires `deviceMotion`

        return true;
      }
    });

    this.client = soundworksClient;
    this.client.pluginManager.register('platform', _client2.default, {
      features: [// @note - this syntax is ugly
      ['web-audio', audioContext], ['devicemotion']]
    });
    this.client.pluginManager.register('checkin', _client3.default);
    this.client.pluginManager.register('file-watcher', _client.default);
    this.client.pluginManager.register('scripts-data', _client6.default);
    this.client.pluginManager.register('scripts-audio', _client6.default); // maybe have 2 sync plugins : 1 for audio, 1 for high precision
    // on androids devices, the resolution of the movement time stamp
    // can be really poor (~80ms on samsung A3)
    //

    this.client.pluginManager.register('sync', _client5.default, {
      // getTimeFunction: () => audioContext.currentTime,
      getTimeFunction: () => performance.now() * 0.001
    }, ['platform']);
    this.client.pluginManager.register('logger', _client7.default); // we don't want to block for whatever reason on first screen

    this.client.pluginManager.register('audio-buffer-loader', _client4.default, {
      assetsDomain: this.client.config.env.assetsDomain
    }, ['platform']);
    this.audioContext = audioContext;

    if (audioContext) {
      this.audioMaster = audioContext.destination;
    }
  }

  async init(config) {
    return Promise.resolve(true);
  }

  async start() {
    this.project = new _Project.default(this);
    await this.project.init();
    return Promise.resolve(true);
  }

  configureExperience(experience, enableServices = {}) {
    this.experience = experience;
    this.experience.plugins = {};
    const plugins = [// 'file-watcher', // we don't need that client-side
    'sync', 'platform', 'checkin', 'audio-buffer-loader', 'scripts-data', 'scripts-audio', 'logger'];
    const pluginsRequiringAudioContext = ['platform', 'sync'];
    plugins.forEach(pluginName => {
      if (!(pluginName in enableServices) || enableServices[pluginName] === true) {
        // check plugin that requires the audioContext
        if (pluginsRequiringAudioContext.indexOf(pluginName) !== -1 && this.audioContext === null) {
          throw new Error(`plugin ${pluginName} requires a valid audioContext`);
        }

        this.experience.plugins[pluginName] = this.experience.require(pluginName);
      }
    });
  }

}

var _default = CoMo;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,