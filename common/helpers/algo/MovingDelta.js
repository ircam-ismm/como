"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function simpleLinearRegression(values, dt) {
  // means
  let xSum = 0;
  let ySum = 0;
  const length = values.length;

  for (let i = 0; i < length; i++) {
    xSum += i * dt;
    ySum += values[i];
  }

  const xMean = xSum / length;
  const yMean = ySum / length;
  let sumDiffXMeanSquared = 0; // sum[ pow((x - xMean), 2) ]

  let sumDiffYMeanSquared = 0; // sum[ pow((y - yMean), 2) ]

  let sumDiffXYMean = 0; // sum[ (x - xMean)(y - yMean) ]

  for (let i = 0; i < length; i++) {
    const diffXMean = dt * i - xMean;
    const diffYMean = values[i] - yMean;
    const diffXMeanSquared = diffXMean * diffXMean;
    const diffYMeanSquared = diffYMean * diffYMean;
    const diffXYMean = diffXMean * diffYMean;
    sumDiffXMeanSquared += diffXMeanSquared;
    sumDiffYMeanSquared += diffYMeanSquared;
    sumDiffXYMean += diffXYMean;
  } // horizontal line, all y on same line


  if (sumDiffYMeanSquared === 0) {
    return 0;
  } // Pearson correlation coefficient:
  // cf. https://www.youtube.com/watch?v=2SCg8Kuh0tE
  //
  //                 ∑ [ (x - xMean)(y - yMean) ]
  // r = ------------------------------------------------------
  //     sqrt( ∑ [ pow((x - xMean), 2), pow((y - yMean), 2) ] )
  //
  //


  const r = sumDiffXYMean / Math.sqrt(sumDiffXMeanSquared * sumDiffYMeanSquared); // then we have:
  // cf. https://www.youtube.com/watch?v=GhrxgbQnEEU
  //
  // y = a + bx
  // where:
  //         Sy
  // b = r * --
  //         Sx
  //
  // a = yMean - b * xMean
  //
  // S for standard deviation
  //            ∑ [ pow((x - xMean), 2) ]
  // Sx = sqrt( -------------------------  )
  //                      N - 1

  const Sx = Math.sqrt(sumDiffXMeanSquared / (length - 1));
  const Sy = Math.sqrt(sumDiffYMeanSquared / (length - 1));
  const b = r * (Sy / Sx);
  return b;
}

class MovingDelta {
  constructor(order = 5, initValue = 0) {
    this.order = order;
    this.stack = [];
    this.index = 0; // fill stack with zeros

    for (let i = 0; i < this.order; i++) {
      this.stack[i] = initValue;
    }
  }

  process(value, dt) {
    if (this.order < 2) {
      return 0;
    }

    this.stack[this.index] = value;
    this.index = (this.index + 1) % this.order;
    const delta = simpleLinearRegression(this.stack, dt);
    return delta;
  }

}

var _default = MovingDelta;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9hbGdvL01vdmluZ0RlbHRhLmpzIl0sIm5hbWVzIjpbInNpbXBsZUxpbmVhclJlZ3Jlc3Npb24iLCJ2YWx1ZXMiLCJkdCIsInhTdW0iLCJ5U3VtIiwibGVuZ3RoIiwiaSIsInhNZWFuIiwieU1lYW4iLCJzdW1EaWZmWE1lYW5TcXVhcmVkIiwic3VtRGlmZllNZWFuU3F1YXJlZCIsInN1bURpZmZYWU1lYW4iLCJkaWZmWE1lYW4iLCJkaWZmWU1lYW4iLCJkaWZmWE1lYW5TcXVhcmVkIiwiZGlmZllNZWFuU3F1YXJlZCIsImRpZmZYWU1lYW4iLCJyIiwiTWF0aCIsInNxcnQiLCJTeCIsIlN5IiwiYiIsIk1vdmluZ0RlbHRhIiwiY29uc3RydWN0b3IiLCJvcmRlciIsImluaXRWYWx1ZSIsInN0YWNrIiwiaW5kZXgiLCJwcm9jZXNzIiwidmFsdWUiLCJkZWx0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLHNCQUFULENBQWdDQyxNQUFoQyxFQUF3Q0MsRUFBeEMsRUFBNEM7QUFDMUM7QUFDQSxNQUFJQyxJQUFJLEdBQUcsQ0FBWDtBQUNBLE1BQUlDLElBQUksR0FBRyxDQUFYO0FBQ0EsUUFBTUMsTUFBTSxHQUFHSixNQUFNLENBQUNJLE1BQXRCOztBQUVBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsTUFBcEIsRUFBNEJDLENBQUMsRUFBN0IsRUFBaUM7QUFDL0JILElBQUFBLElBQUksSUFBSUcsQ0FBQyxHQUFHSixFQUFaO0FBQ0FFLElBQUFBLElBQUksSUFBSUgsTUFBTSxDQUFDSyxDQUFELENBQWQ7QUFDRDs7QUFFRCxRQUFNQyxLQUFLLEdBQUdKLElBQUksR0FBR0UsTUFBckI7QUFDQSxRQUFNRyxLQUFLLEdBQUdKLElBQUksR0FBR0MsTUFBckI7QUFFQSxNQUFJSSxtQkFBbUIsR0FBRyxDQUExQixDQWQwQyxDQWNiOztBQUM3QixNQUFJQyxtQkFBbUIsR0FBRyxDQUExQixDQWYwQyxDQWViOztBQUM3QixNQUFJQyxhQUFhLEdBQUcsQ0FBcEIsQ0FoQjBDLENBZ0JiOztBQUU3QixPQUFLLElBQUlMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE1BQXBCLEVBQTRCQyxDQUFDLEVBQTdCLEVBQWlDO0FBQy9CLFVBQU1NLFNBQVMsR0FBR1YsRUFBRSxHQUFHSSxDQUFMLEdBQVNDLEtBQTNCO0FBQ0EsVUFBTU0sU0FBUyxHQUFHWixNQUFNLENBQUNLLENBQUQsQ0FBTixHQUFZRSxLQUE5QjtBQUVBLFVBQU1NLGdCQUFnQixHQUFHRixTQUFTLEdBQUdBLFNBQXJDO0FBQ0EsVUFBTUcsZ0JBQWdCLEdBQUdGLFNBQVMsR0FBR0EsU0FBckM7QUFDQSxVQUFNRyxVQUFVLEdBQUdKLFNBQVMsR0FBR0MsU0FBL0I7QUFFQUosSUFBQUEsbUJBQW1CLElBQUlLLGdCQUF2QjtBQUNBSixJQUFBQSxtQkFBbUIsSUFBSUssZ0JBQXZCO0FBQ0FKLElBQUFBLGFBQWEsSUFBSUssVUFBakI7QUFDRCxHQTdCeUMsQ0ErQjFDOzs7QUFDQSxNQUFJTixtQkFBbUIsS0FBSyxDQUE1QixFQUErQjtBQUM3QixXQUFPLENBQVA7QUFDRCxHQWxDeUMsQ0FvQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFFBQU1PLENBQUMsR0FBR04sYUFBYSxHQUFHTyxJQUFJLENBQUNDLElBQUwsQ0FBVVYsbUJBQW1CLEdBQUdDLG1CQUFoQyxDQUExQixDQTVDMEMsQ0E4QzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxRQUFNVSxFQUFFLEdBQUdGLElBQUksQ0FBQ0MsSUFBTCxDQUFVVixtQkFBbUIsSUFBSUosTUFBTSxHQUFHLENBQWIsQ0FBN0IsQ0FBWDtBQUNBLFFBQU1nQixFQUFFLEdBQUdILElBQUksQ0FBQ0MsSUFBTCxDQUFVVCxtQkFBbUIsSUFBSUwsTUFBTSxHQUFHLENBQWIsQ0FBN0IsQ0FBWDtBQUNBLFFBQU1pQixDQUFDLEdBQUdMLENBQUMsSUFBSUksRUFBRSxHQUFHRCxFQUFULENBQVg7QUFFQSxTQUFPRSxDQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsV0FBTixDQUFrQjtBQUNoQkMsRUFBQUEsV0FBVyxDQUFDQyxLQUFLLEdBQUcsQ0FBVCxFQUFZQyxTQUFTLEdBQUcsQ0FBeEIsRUFBMkI7QUFDcEMsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsU0FBS0UsS0FBTCxHQUFhLEVBQWI7QUFDQSxTQUFLQyxLQUFMLEdBQWEsQ0FBYixDQUhvQyxDQUtwQzs7QUFDQSxTQUFLLElBQUl0QixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUttQixLQUF6QixFQUFnQ25CLENBQUMsRUFBakMsRUFBcUM7QUFDbkMsV0FBS3FCLEtBQUwsQ0FBV3JCLENBQVgsSUFBZ0JvQixTQUFoQjtBQUNEO0FBQ0Y7O0FBR0RHLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBRCxFQUFRNUIsRUFBUixFQUFZO0FBQ2pCLFFBQUksS0FBS3VCLEtBQUwsR0FBYSxDQUFqQixFQUFvQjtBQUNsQixhQUFPLENBQVA7QUFDRDs7QUFFRCxTQUFLRSxLQUFMLENBQVcsS0FBS0MsS0FBaEIsSUFBeUJFLEtBQXpCO0FBQ0EsU0FBS0YsS0FBTCxHQUFhLENBQUMsS0FBS0EsS0FBTCxHQUFhLENBQWQsSUFBbUIsS0FBS0gsS0FBckM7QUFFQSxVQUFNTSxLQUFLLEdBQUcvQixzQkFBc0IsQ0FBQyxLQUFLMkIsS0FBTixFQUFhekIsRUFBYixDQUFwQztBQUVBLFdBQU82QixLQUFQO0FBQ0Q7O0FBeEJlOztlQTJCSFIsVyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNpbXBsZUxpbmVhclJlZ3Jlc3Npb24odmFsdWVzLCBkdCkge1xuICAvLyBtZWFuc1xuICBsZXQgeFN1bSA9IDA7XG4gIGxldCB5U3VtID0gMDtcbiAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgeFN1bSArPSBpICogZHQ7XG4gICAgeVN1bSArPSB2YWx1ZXNbaV07XG4gIH1cblxuICBjb25zdCB4TWVhbiA9IHhTdW0gLyBsZW5ndGg7XG4gIGNvbnN0IHlNZWFuID0geVN1bSAvIGxlbmd0aDtcblxuICBsZXQgc3VtRGlmZlhNZWFuU3F1YXJlZCA9IDA7IC8vIHN1bVsgcG93KCh4IC0geE1lYW4pLCAyKSBdXG4gIGxldCBzdW1EaWZmWU1lYW5TcXVhcmVkID0gMDsgLy8gc3VtWyBwb3coKHkgLSB5TWVhbiksIDIpIF1cbiAgbGV0IHN1bURpZmZYWU1lYW4gPSAwOyAgICAgICAvLyBzdW1bICh4IC0geE1lYW4pKHkgLSB5TWVhbikgXVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkaWZmWE1lYW4gPSBkdCAqIGkgLSB4TWVhbjtcbiAgICBjb25zdCBkaWZmWU1lYW4gPSB2YWx1ZXNbaV0gLSB5TWVhbjtcblxuICAgIGNvbnN0IGRpZmZYTWVhblNxdWFyZWQgPSBkaWZmWE1lYW4gKiBkaWZmWE1lYW47XG4gICAgY29uc3QgZGlmZllNZWFuU3F1YXJlZCA9IGRpZmZZTWVhbiAqIGRpZmZZTWVhbjtcbiAgICBjb25zdCBkaWZmWFlNZWFuID0gZGlmZlhNZWFuICogZGlmZllNZWFuO1xuXG4gICAgc3VtRGlmZlhNZWFuU3F1YXJlZCArPSBkaWZmWE1lYW5TcXVhcmVkO1xuICAgIHN1bURpZmZZTWVhblNxdWFyZWQgKz0gZGlmZllNZWFuU3F1YXJlZDtcbiAgICBzdW1EaWZmWFlNZWFuICs9IGRpZmZYWU1lYW47XG4gIH1cblxuICAvLyBob3Jpem9udGFsIGxpbmUsIGFsbCB5IG9uIHNhbWUgbGluZVxuICBpZiAoc3VtRGlmZllNZWFuU3F1YXJlZCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gUGVhcnNvbiBjb3JyZWxhdGlvbiBjb2VmZmljaWVudDpcbiAgLy8gY2YuIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9MlNDZzhLdWgwdEVcbiAgLy9cbiAgLy8gICAgICAgICAgICAgICAgIOKIkSBbICh4IC0geE1lYW4pKHkgLSB5TWVhbikgXVxuICAvLyByID0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vICAgICBzcXJ0KCDiiJEgWyBwb3coKHggLSB4TWVhbiksIDIpLCBwb3coKHkgLSB5TWVhbiksIDIpIF0gKVxuICAvL1xuICAvL1xuICBjb25zdCByID0gc3VtRGlmZlhZTWVhbiAvIE1hdGguc3FydChzdW1EaWZmWE1lYW5TcXVhcmVkICogc3VtRGlmZllNZWFuU3F1YXJlZCk7XG5cbiAgLy8gdGhlbiB3ZSBoYXZlOlxuICAvLyBjZi4gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1HaHJ4Z2JRbkVFVVxuICAvL1xuICAvLyB5ID0gYSArIGJ4XG4gIC8vIHdoZXJlOlxuICAvLyAgICAgICAgIFN5XG4gIC8vIGIgPSByICogLS1cbiAgLy8gICAgICAgICBTeFxuICAvL1xuICAvLyBhID0geU1lYW4gLSBiICogeE1lYW5cbiAgLy9cbiAgLy8gUyBmb3Igc3RhbmRhcmQgZGV2aWF0aW9uXG4gIC8vICAgICAgICAgICAg4oiRIFsgcG93KCh4IC0geE1lYW4pLCAyKSBdXG4gIC8vIFN4ID0gc3FydCggLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAgKVxuICAvLyAgICAgICAgICAgICAgICAgICAgICBOIC0gMVxuICBjb25zdCBTeCA9IE1hdGguc3FydChzdW1EaWZmWE1lYW5TcXVhcmVkIC8gKGxlbmd0aCAtIDEpKTtcbiAgY29uc3QgU3kgPSBNYXRoLnNxcnQoc3VtRGlmZllNZWFuU3F1YXJlZCAvIChsZW5ndGggLSAxKSk7XG4gIGNvbnN0IGIgPSByICogKFN5IC8gU3gpO1xuXG4gIHJldHVybiBiO1xufVxuXG5jbGFzcyBNb3ZpbmdEZWx0YSB7XG4gIGNvbnN0cnVjdG9yKG9yZGVyID0gNSwgaW5pdFZhbHVlID0gMCkge1xuICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IDA7XG5cbiAgICAvLyBmaWxsIHN0YWNrIHdpdGggemVyb3NcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXI7IGkrKykge1xuICAgICAgdGhpcy5zdGFja1tpXSA9IGluaXRWYWx1ZTtcbiAgICB9XG4gIH1cblxuXG4gIHByb2Nlc3ModmFsdWUsIGR0KSB7XG4gICAgaWYgKHRoaXMub3JkZXIgPCAyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrW3RoaXMuaW5kZXhdID0gdmFsdWU7XG4gICAgdGhpcy5pbmRleCA9ICh0aGlzLmluZGV4ICsgMSkgJSB0aGlzLm9yZGVyO1xuIFxuICAgIGNvbnN0IGRlbHRhID0gc2ltcGxlTGluZWFyUmVncmVzc2lvbih0aGlzLnN0YWNrLCBkdCk7XG4gICAgXG4gICAgcmV0dXJuIGRlbHRhO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vdmluZ0RlbHRhO1xuIl19