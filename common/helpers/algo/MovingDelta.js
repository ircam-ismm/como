"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function simpleLinearRegression(values, indices, dt) {
  // means
  let xSum = 0;
  let ySum = 0;
  let xySum = 0;
  let xxSum = 0;
  const length = values.length;

  for (let i = 0; i < length; i++) {
    xSum += indices[i];
    ySum += values[i];
    xySum += indices[i] * values[i];
    xxSum += indices[i] * indices[i];
  } // formula for uneven spaced x, could be simplified to xySum/xxSum 
  // but would need to distinct N odd/even and reorder indices


  const b = (length * xySum - xSum * ySum) / (dt * (length * xxSum - xSum * xSum));
  return b;
}

class MovingDelta {
  constructor(order = 5, initValue = 0) {
    this.order = order;
    this.stack = [];
    this.indices = [];
    this.index = 0; // fill stack with zeros

    for (let i = 0; i < this.order; i++) {
      this.stack[i] = initValue;
      this.indices[i] = i;
    }
  }

  process(value, dt) {
    if (this.order < 2) {
      return 0;
    }

    this.stack.shift();
    this.stack.push(value); // this.stack[this.index] = value;
    // this.indices[this.index] = this.index + 1;

    const delta = simpleLinearRegression(this.stack, this.indices, dt); // this.index = (this.index + 1) % this.order;

    return delta;
  }

}

var _default = MovingDelta;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9hbGdvL01vdmluZ0RlbHRhLmpzIl0sIm5hbWVzIjpbInNpbXBsZUxpbmVhclJlZ3Jlc3Npb24iLCJ2YWx1ZXMiLCJpbmRpY2VzIiwiZHQiLCJ4U3VtIiwieVN1bSIsInh5U3VtIiwieHhTdW0iLCJsZW5ndGgiLCJpIiwiYiIsIk1vdmluZ0RlbHRhIiwiY29uc3RydWN0b3IiLCJvcmRlciIsImluaXRWYWx1ZSIsInN0YWNrIiwiaW5kZXgiLCJwcm9jZXNzIiwidmFsdWUiLCJzaGlmdCIsInB1c2giLCJkZWx0YSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLHNCQUFULENBQWdDQyxNQUFoQyxFQUF3Q0MsT0FBeEMsRUFBaURDLEVBQWpELEVBQXFEO0FBQ25EO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLENBQVg7QUFDQSxNQUFJQyxJQUFJLEdBQUcsQ0FBWDtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxRQUFNQyxNQUFNLEdBQUdQLE1BQU0sQ0FBQ08sTUFBdEI7O0FBRUEsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxNQUFwQixFQUE0QkMsQ0FBQyxFQUE3QixFQUFpQztBQUMvQkwsSUFBQUEsSUFBSSxJQUFJRixPQUFPLENBQUNPLENBQUQsQ0FBZjtBQUNBSixJQUFBQSxJQUFJLElBQUlKLE1BQU0sQ0FBQ1EsQ0FBRCxDQUFkO0FBQ0FILElBQUFBLEtBQUssSUFBSUosT0FBTyxDQUFDTyxDQUFELENBQVAsR0FBYVIsTUFBTSxDQUFDUSxDQUFELENBQTVCO0FBQ0FGLElBQUFBLEtBQUssSUFBSUwsT0FBTyxDQUFDTyxDQUFELENBQVAsR0FBYVAsT0FBTyxDQUFDTyxDQUFELENBQTdCO0FBQ0QsR0Fia0QsQ0FlbkQ7QUFDQTs7O0FBQ0EsUUFBTUMsQ0FBQyxHQUFHLENBQUVGLE1BQU0sR0FBR0YsS0FBVixHQUFvQkYsSUFBSSxHQUFHQyxJQUE1QixLQUFzQ0YsRUFBRSxJQUFLSyxNQUFNLEdBQUdELEtBQVYsR0FBb0JILElBQUksR0FBR0EsSUFBL0IsQ0FBeEMsQ0FBVjtBQUVBLFNBQU9NLENBQVA7QUFDRDs7QUFFRCxNQUFNQyxXQUFOLENBQWtCO0FBQ2hCQyxFQUFBQSxXQUFXLENBQUNDLEtBQUssR0FBRyxDQUFULEVBQVlDLFNBQVMsR0FBRyxDQUF4QixFQUEyQjtBQUNwQyxTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLRSxLQUFMLEdBQWEsRUFBYjtBQUNBLFNBQUtiLE9BQUwsR0FBZSxFQUFmO0FBQ0EsU0FBS2MsS0FBTCxHQUFhLENBQWIsQ0FKb0MsQ0FNcEM7O0FBQ0EsU0FBSyxJQUFJUCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtJLEtBQXpCLEVBQWdDSixDQUFDLEVBQWpDLEVBQXFDO0FBQ25DLFdBQUtNLEtBQUwsQ0FBV04sQ0FBWCxJQUFnQkssU0FBaEI7QUFDQSxXQUFLWixPQUFMLENBQWFPLENBQWIsSUFBa0JBLENBQWxCO0FBQ0Q7QUFDRjs7QUFHRFEsRUFBQUEsT0FBTyxDQUFDQyxLQUFELEVBQVFmLEVBQVIsRUFBWTtBQUNqQixRQUFJLEtBQUtVLEtBQUwsR0FBYSxDQUFqQixFQUFvQjtBQUNsQixhQUFPLENBQVA7QUFDRDs7QUFDRCxTQUFLRSxLQUFMLENBQVdJLEtBQVg7QUFDQSxTQUFLSixLQUFMLENBQVdLLElBQVgsQ0FBZ0JGLEtBQWhCLEVBTGlCLENBTWpCO0FBQ0E7O0FBQ0EsVUFBTUcsS0FBSyxHQUFHckIsc0JBQXNCLENBQUMsS0FBS2UsS0FBTixFQUFhLEtBQUtiLE9BQWxCLEVBQTJCQyxFQUEzQixDQUFwQyxDQVJpQixDQVVqQjs7QUFFQSxXQUFPa0IsS0FBUDtBQUNEOztBQTVCZTs7ZUErQkhWLFciLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzaW1wbGVMaW5lYXJSZWdyZXNzaW9uKHZhbHVlcywgaW5kaWNlcywgZHQpIHtcbiAgLy8gbWVhbnNcbiAgbGV0IHhTdW0gPSAwO1xuICBsZXQgeVN1bSA9IDA7XG4gIGxldCB4eVN1bSA9IDA7XG4gIGxldCB4eFN1bSA9IDA7XG4gIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHhTdW0gKz0gaW5kaWNlc1tpXTtcbiAgICB5U3VtICs9IHZhbHVlc1tpXTtcbiAgICB4eVN1bSArPSBpbmRpY2VzW2ldICogdmFsdWVzW2ldO1xuICAgIHh4U3VtICs9IGluZGljZXNbaV0gKiBpbmRpY2VzW2ldO1xuICB9XG5cbiAgLy8gZm9ybXVsYSBmb3IgdW5ldmVuIHNwYWNlZCB4LCBjb3VsZCBiZSBzaW1wbGlmaWVkIHRvIHh5U3VtL3h4U3VtIFxuICAvLyBidXQgd291bGQgbmVlZCB0byBkaXN0aW5jdCBOIG9kZC9ldmVuIGFuZCByZW9yZGVyIGluZGljZXNcbiAgY29uc3QgYiA9ICgobGVuZ3RoICogeHlTdW0pIC0gKHhTdW0gKiB5U3VtKSkgLyAoZHQgKiAoKGxlbmd0aCAqIHh4U3VtKSAtICh4U3VtICogeFN1bSkpKTtcbiAgXG4gIHJldHVybiBiO1xufVxuXG5jbGFzcyBNb3ZpbmdEZWx0YSB7XG4gIGNvbnN0cnVjdG9yKG9yZGVyID0gNSwgaW5pdFZhbHVlID0gMCkge1xuICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRpY2VzID0gW107XG4gICAgdGhpcy5pbmRleCA9IDA7XG5cbiAgICAvLyBmaWxsIHN0YWNrIHdpdGggemVyb3NcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXI7IGkrKykge1xuICAgICAgdGhpcy5zdGFja1tpXSA9IGluaXRWYWx1ZTtcbiAgICAgIHRoaXMuaW5kaWNlc1tpXSA9IGk7XG4gICAgfVxuICB9XG5cblxuICBwcm9jZXNzKHZhbHVlLCBkdCkge1xuICAgIGlmICh0aGlzLm9yZGVyIDwgMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHRoaXMuc3RhY2suc2hpZnQoKTtcbiAgICB0aGlzLnN0YWNrLnB1c2godmFsdWUpXG4gICAgLy8gdGhpcy5zdGFja1t0aGlzLmluZGV4XSA9IHZhbHVlO1xuICAgIC8vIHRoaXMuaW5kaWNlc1t0aGlzLmluZGV4XSA9IHRoaXMuaW5kZXggKyAxO1xuICAgIGNvbnN0IGRlbHRhID0gc2ltcGxlTGluZWFyUmVncmVzc2lvbih0aGlzLnN0YWNrLCB0aGlzLmluZGljZXMsIGR0KTtcbiAgICBcbiAgICAvLyB0aGlzLmluZGV4ID0gKHRoaXMuaW5kZXggKyAxKSAlIHRoaXMub3JkZXI7XG4gICAgXG4gICAgcmV0dXJuIGRlbHRhO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vdmluZ0RlbHRhO1xuIl19