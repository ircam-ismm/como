"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class MovingStd {
  constructor(order = 5, initValue = 0) {
    this.order = order;
    this.stack = [];
    this.index = 0; // fill stack with zeros

    for (let i = 0; i < this.order; i++) {
      this.stack[i] = initValue;
    }
  }

  process(value) {
    this.stack[this.index] = value;
    this.index = (this.index + 1) % this.order; //const std = math.std(this.stack);

    let sum = 0;
    let sumSquare = 0;

    for (let i = 0; i < this.order; i++) {
      sum += this.stack[i];
      sumSquare += pow(this.stack[i], 2);
    }

    const std = pow((this.order * sum - sumSquare) / (this.order * (this.order - 1)), 0.5);
    return std;
  }

}

var _default = MovingStd;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vaGVscGVycy9hbGdvL01vdmluZ1N0ZC5qcyJdLCJuYW1lcyI6WyJNb3ZpbmdTdGQiLCJjb25zdHJ1Y3RvciIsIm9yZGVyIiwiaW5pdFZhbHVlIiwic3RhY2siLCJpbmRleCIsImkiLCJwcm9jZXNzIiwidmFsdWUiLCJzdW0iLCJzdW1TcXVhcmUiLCJwb3ciLCJzdGQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxNQUFNQSxTQUFOLENBQWdCO0FBQ2RDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBSyxHQUFHLENBQVQsRUFBWUMsU0FBUyxHQUFHLENBQXhCLEVBQTJCO0FBQ3BDLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtFLEtBQUwsR0FBYSxFQUFiO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLENBQWIsQ0FIb0MsQ0FLcEM7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtKLEtBQXpCLEVBQWdDSSxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DLFdBQUtGLEtBQUwsQ0FBV0UsQ0FBWCxJQUFnQkgsU0FBaEI7QUFDRDtBQUNGOztBQUVESSxFQUFBQSxPQUFPLENBQUNDLEtBQUQsRUFBUTtBQUNiLFNBQUtKLEtBQUwsQ0FBVyxLQUFLQyxLQUFoQixJQUF5QkcsS0FBekI7QUFDQSxTQUFLSCxLQUFMLEdBQWEsQ0FBQyxLQUFLQSxLQUFMLEdBQWEsQ0FBZCxJQUFtQixLQUFLSCxLQUFyQyxDQUZhLENBSWI7O0FBQ0EsUUFBSU8sR0FBRyxHQUFHLENBQVY7QUFDQSxRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7O0FBRUEsU0FBSyxJQUFJSixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtKLEtBQXpCLEVBQWdDSSxDQUFDLEVBQWpDLEVBQXFDO0FBQ25DRyxNQUFBQSxHQUFHLElBQUksS0FBS0wsS0FBTCxDQUFXRSxDQUFYLENBQVA7QUFDQUksTUFBQUEsU0FBUyxJQUFJQyxHQUFHLENBQUMsS0FBS1AsS0FBTCxDQUFXRSxDQUFYLENBQUQsRUFBZSxDQUFmLENBQWhCO0FBQ0Q7O0FBRUQsVUFBTU0sR0FBRyxHQUFHRCxHQUFHLENBQUUsQ0FBQyxLQUFLVCxLQUFMLEdBQVdPLEdBQVgsR0FBaUJDLFNBQWxCLEtBQStCLEtBQUtSLEtBQUwsSUFBWSxLQUFLQSxLQUFMLEdBQVcsQ0FBdkIsQ0FBL0IsQ0FBRixFQUE2RCxHQUE3RCxDQUFmO0FBRUEsV0FBT1UsR0FBUDtBQUNEOztBQTVCYTs7ZUErQkRaLFMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIE1vdmluZ1N0ZCB7XG4gIGNvbnN0cnVjdG9yKG9yZGVyID0gNSwgaW5pdFZhbHVlID0gMCkge1xuICAgIHRoaXMub3JkZXIgPSBvcmRlcjtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IDA7XG5cbiAgICAvLyBmaWxsIHN0YWNrIHdpdGggemVyb3NcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXI7IGkrKykge1xuICAgICAgdGhpcy5zdGFja1tpXSA9IGluaXRWYWx1ZTtcbiAgICB9XG4gIH1cblxuICBwcm9jZXNzKHZhbHVlKSB7XG4gICAgdGhpcy5zdGFja1t0aGlzLmluZGV4XSA9IHZhbHVlO1xuICAgIHRoaXMuaW5kZXggPSAodGhpcy5pbmRleCArIDEpICUgdGhpcy5vcmRlcjtcblxuICAgIC8vY29uc3Qgc3RkID0gbWF0aC5zdGQodGhpcy5zdGFjayk7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgbGV0IHN1bVNxdWFyZSA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3JkZXI7IGkrKykge1xuICAgICAgc3VtICs9IHRoaXMuc3RhY2tbaV07XG4gICAgICBzdW1TcXVhcmUgKz0gcG93KHRoaXMuc3RhY2tbaV0sMik7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RkID0gcG93KCgodGhpcy5vcmRlcipzdW0gLSBzdW1TcXVhcmUpLyAodGhpcy5vcmRlcioodGhpcy5vcmRlci0xKSkpLDAuNSk7IFxuICAgIFxuICAgIHJldHVybiBzdGQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW92aW5nU3RkO1xuIl19