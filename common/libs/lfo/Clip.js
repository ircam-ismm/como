"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseLfo = _interopRequireDefault(require("./BaseLfo.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const definitions = {
  min: {
    type: 'float',
    default: 0,
    min: -Infinity,
    max: +Infinity
  },
  max: {
    type: 'float',
    default: 1,
    min: -Infinity,
    max: +Infinity
  }
};
/**
 * Clip incomming according to given `min` and `max` parameters
 *
 * @param {Object} options - Override default paramters
 * @param {Number} [options.min=0] - Minimum value
 * @param {Number} [options.max=1] - Maximum value
 */

class Clip extends _BaseLfo.default {
  constructor(options) {
    super(definitions, options);
  }

  inputVector(data) {
    const min = this.params.get('min');
    const max = this.params.get('max');
    const frameSize = this.streamParams.frameSize;
    const outData = this.frame.data; // @todo - could handle vector as min and max

    for (let i = 0; i < frameSize; i++) outData[i] = Math.min(max, Math.max(min, data[i]));

    return outData;
  }

  processVector(frame) {
    this.frame.data = this.inputVector(frame.data);
  }

  inputSignal(data) {
    const min = this.params.get('min');
    const max = this.params.get('max');
    const frameSize = this.streamParams.frameSize;
    const outData = this.frame.data;

    for (let i = 0; i < frameSize; i++) outData[i] = Math.min(max, Math.max(min, data[i]));

    return outData;
  }

  processSignal(frame) {
    this.frame.data = this.inputSignal(frame.data);
  }

}

var _default = Clip;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vbGlicy9sZm8vQ2xpcC5qcyJdLCJuYW1lcyI6WyJkZWZpbml0aW9ucyIsIm1pbiIsInR5cGUiLCJkZWZhdWx0IiwiSW5maW5pdHkiLCJtYXgiLCJDbGlwIiwiQmFzZUxmbyIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImlucHV0VmVjdG9yIiwiZGF0YSIsInBhcmFtcyIsImdldCIsImZyYW1lU2l6ZSIsInN0cmVhbVBhcmFtcyIsIm91dERhdGEiLCJmcmFtZSIsImkiLCJNYXRoIiwicHJvY2Vzc1ZlY3RvciIsImlucHV0U2lnbmFsIiwicHJvY2Vzc1NpZ25hbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsTUFBTUEsV0FBVyxHQUFHO0FBQ2xCQyxFQUFBQSxHQUFHLEVBQUU7QUFDSEMsSUFBQUEsSUFBSSxFQUFFLE9BREg7QUFFSEMsSUFBQUEsT0FBTyxFQUFFLENBRk47QUFHSEYsSUFBQUEsR0FBRyxFQUFFLENBQUNHLFFBSEg7QUFJSEMsSUFBQUEsR0FBRyxFQUFFLENBQUNEO0FBSkgsR0FEYTtBQU9sQkMsRUFBQUEsR0FBRyxFQUFFO0FBQ0hILElBQUFBLElBQUksRUFBRSxPQURIO0FBRUhDLElBQUFBLE9BQU8sRUFBRSxDQUZOO0FBR0hGLElBQUFBLEdBQUcsRUFBRSxDQUFDRyxRQUhIO0FBSUhDLElBQUFBLEdBQUcsRUFBRSxDQUFDRDtBQUpIO0FBUGEsQ0FBcEI7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNRSxJQUFOLFNBQW1CQyxnQkFBbkIsQ0FBMkI7QUFDekJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFVBQU1ULFdBQU4sRUFBbUJTLE9BQW5CO0FBQ0Q7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPO0FBQ2hCLFVBQU1WLEdBQUcsR0FBRyxLQUFLVyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsS0FBaEIsQ0FBWjtBQUNBLFVBQU1SLEdBQUcsR0FBRyxLQUFLTyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsS0FBaEIsQ0FBWjtBQUNBLFVBQU1DLFNBQVMsR0FBRyxLQUFLQyxZQUFMLENBQWtCRCxTQUFwQztBQUNBLFVBQU1FLE9BQU8sR0FBRyxLQUFLQyxLQUFMLENBQVdOLElBQTNCLENBSmdCLENBTWhCOztBQUNBLFNBQUssSUFBSU8sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osU0FBcEIsRUFBK0JJLENBQUMsRUFBaEMsRUFDRUYsT0FBTyxDQUFDRSxDQUFELENBQVAsR0FBYUMsSUFBSSxDQUFDbEIsR0FBTCxDQUFTSSxHQUFULEVBQWNjLElBQUksQ0FBQ2QsR0FBTCxDQUFTSixHQUFULEVBQWNVLElBQUksQ0FBQ08sQ0FBRCxDQUFsQixDQUFkLENBQWI7O0FBRUYsV0FBT0YsT0FBUDtBQUNEOztBQUVESSxFQUFBQSxhQUFhLENBQUNILEtBQUQsRUFBUTtBQUNuQixTQUFLQSxLQUFMLENBQVdOLElBQVgsR0FBa0IsS0FBS0QsV0FBTCxDQUFpQk8sS0FBSyxDQUFDTixJQUF2QixDQUFsQjtBQUNEOztBQUVEVSxFQUFBQSxXQUFXLENBQUNWLElBQUQsRUFBTztBQUNoQixVQUFNVixHQUFHLEdBQUcsS0FBS1csTUFBTCxDQUFZQyxHQUFaLENBQWdCLEtBQWhCLENBQVo7QUFDQSxVQUFNUixHQUFHLEdBQUcsS0FBS08sTUFBTCxDQUFZQyxHQUFaLENBQWdCLEtBQWhCLENBQVo7QUFDQSxVQUFNQyxTQUFTLEdBQUcsS0FBS0MsWUFBTCxDQUFrQkQsU0FBcEM7QUFDQSxVQUFNRSxPQUFPLEdBQUcsS0FBS0MsS0FBTCxDQUFXTixJQUEzQjs7QUFFQSxTQUFLLElBQUlPLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLFNBQXBCLEVBQStCSSxDQUFDLEVBQWhDLEVBQ0VGLE9BQU8sQ0FBQ0UsQ0FBRCxDQUFQLEdBQWFDLElBQUksQ0FBQ2xCLEdBQUwsQ0FBU0ksR0FBVCxFQUFjYyxJQUFJLENBQUNkLEdBQUwsQ0FBU0osR0FBVCxFQUFjVSxJQUFJLENBQUNPLENBQUQsQ0FBbEIsQ0FBZCxDQUFiOztBQUVGLFdBQU9GLE9BQVA7QUFDRDs7QUFFRE0sRUFBQUEsYUFBYSxDQUFDTCxLQUFELEVBQVE7QUFDbkIsU0FBS0EsS0FBTCxDQUFXTixJQUFYLEdBQWtCLEtBQUtVLFdBQUwsQ0FBaUJKLEtBQUssQ0FBQ04sSUFBdkIsQ0FBbEI7QUFDRDs7QUFwQ3dCOztlQXVDWkwsSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlTGZvIGZyb20gJy4vQmFzZUxmby5qcyc7XG5cbmNvbnN0IGRlZmluaXRpb25zID0ge1xuICBtaW46IHtcbiAgICB0eXBlOiAnZmxvYXQnLFxuICAgIGRlZmF1bHQ6IDAsXG4gICAgbWluOiAtSW5maW5pdHksXG4gICAgbWF4OiArSW5maW5pdHksXG4gIH0sXG4gIG1heDoge1xuICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgZGVmYXVsdDogMSxcbiAgICBtaW46IC1JbmZpbml0eSxcbiAgICBtYXg6ICtJbmZpbml0eSxcbiAgfSxcbn07XG5cbi8qKlxuICogQ2xpcCBpbmNvbW1pbmcgYWNjb3JkaW5nIHRvIGdpdmVuIGBtaW5gIGFuZCBgbWF4YCBwYXJhbWV0ZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZSBkZWZhdWx0IHBhcmFtdGVyc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1pbj0wXSAtIE1pbmltdW0gdmFsdWVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXg9MV0gLSBNYXhpbXVtIHZhbHVlXG4gKi9cbmNsYXNzIENsaXAgZXh0ZW5kcyBCYXNlTGZvIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKGRlZmluaXRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlucHV0VmVjdG9yKGRhdGEpIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLnBhcmFtcy5nZXQoJ21pbicpO1xuICAgIGNvbnN0IG1heCA9IHRoaXMucGFyYW1zLmdldCgnbWF4Jyk7XG4gICAgY29uc3QgZnJhbWVTaXplID0gdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplO1xuICAgIGNvbnN0IG91dERhdGEgPSB0aGlzLmZyYW1lLmRhdGE7XG5cbiAgICAvLyBAdG9kbyAtIGNvdWxkIGhhbmRsZSB2ZWN0b3IgYXMgbWluIGFuZCBtYXhcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lU2l6ZTsgaSsrKVxuICAgICAgb3V0RGF0YVtpXSA9IE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCBkYXRhW2ldKSk7XG5cbiAgICByZXR1cm4gb3V0RGF0YTtcbiAgfVxuXG4gIHByb2Nlc3NWZWN0b3IoZnJhbWUpIHtcbiAgICB0aGlzLmZyYW1lLmRhdGEgPSB0aGlzLmlucHV0VmVjdG9yKGZyYW1lLmRhdGEpO1xuICB9XG5cbiAgaW5wdXRTaWduYWwoZGF0YSkge1xuICAgIGNvbnN0IG1pbiA9IHRoaXMucGFyYW1zLmdldCgnbWluJyk7XG4gICAgY29uc3QgbWF4ID0gdGhpcy5wYXJhbXMuZ2V0KCdtYXgnKTtcbiAgICBjb25zdCBmcmFtZVNpemUgPSB0aGlzLnN0cmVhbVBhcmFtcy5mcmFtZVNpemU7XG4gICAgY29uc3Qgb3V0RGF0YSA9IHRoaXMuZnJhbWUuZGF0YTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhbWVTaXplOyBpKyspXG4gICAgICBvdXREYXRhW2ldID0gTWF0aC5taW4obWF4LCBNYXRoLm1heChtaW4sIGRhdGFbaV0pKTtcblxuICAgIHJldHVybiBvdXREYXRhO1xuICB9XG5cbiAgcHJvY2Vzc1NpZ25hbChmcmFtZSkge1xuICAgIHRoaXMuZnJhbWUuZGF0YSA9IHRoaXMuaW5wdXRTaWduYWwoZnJhbWUuZGF0YSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2xpcDtcbiJdfQ==