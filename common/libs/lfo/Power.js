"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseLfo = _interopRequireDefault(require("./BaseLfo.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const definitions = {
  exponent: {
    type: 'float',
    default: 1
  }
};
/**
 * Apply an exponant power to the stream.
 *
 * @param {Object} options - Override default parameters
 * @param {Number} exponent - Exponent
 */

class Power extends _BaseLfo.default {
  constructor(options) {
    super(definitions, options);
  }

  inputVector(data) {
    const outData = this.frame.data;
    const frameSize = this.streamParams.frameSize;
    const exponent = this.params.get('exponent');

    for (let i = 0; i < frameSize; i++) outData[i] = Math.pow(data[i], exponent);

    return outData;
  }
  /** @private */


  processVector(frame) {
    this.inputVector(frame.data);
  }

  inputSignal(data) {
    const outData = this.frame.data;
    const frameSize = this.streamParams.frameSize;
    const exponent = this.params.get('exponent');

    for (let i = 0; i < frameSize; i++) outData[i] = Math.pow(data[i], exponent);

    return outData;
  }
  /** @private */


  processSignal(frame) {
    this.inputSignal(frame.data);
  }

}

var _default = Power;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vbGlicy9sZm8vUG93ZXIuanMiXSwibmFtZXMiOlsiZGVmaW5pdGlvbnMiLCJleHBvbmVudCIsInR5cGUiLCJkZWZhdWx0IiwiUG93ZXIiLCJCYXNlTGZvIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiaW5wdXRWZWN0b3IiLCJkYXRhIiwib3V0RGF0YSIsImZyYW1lIiwiZnJhbWVTaXplIiwic3RyZWFtUGFyYW1zIiwicGFyYW1zIiwiZ2V0IiwiaSIsIk1hdGgiLCJwb3ciLCJwcm9jZXNzVmVjdG9yIiwiaW5wdXRTaWduYWwiLCJwcm9jZXNzU2lnbmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7QUFFQSxNQUFNQSxXQUFXLEdBQUc7QUFDbEJDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUUsT0FERTtBQUVSQyxJQUFBQSxPQUFPLEVBQUU7QUFGRDtBQURRLENBQXBCO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQU1DLEtBQU4sU0FBb0JDLGdCQUFwQixDQUE0QjtBQUMxQkMsRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVU7QUFDbkIsVUFBTVAsV0FBTixFQUFtQk8sT0FBbkI7QUFDRDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU87QUFDaEIsVUFBTUMsT0FBTyxHQUFHLEtBQUtDLEtBQUwsQ0FBV0YsSUFBM0I7QUFDQSxVQUFNRyxTQUFTLEdBQUcsS0FBS0MsWUFBTCxDQUFrQkQsU0FBcEM7QUFDQSxVQUFNWCxRQUFRLEdBQUcsS0FBS2EsTUFBTCxDQUFZQyxHQUFaLENBQWdCLFVBQWhCLENBQWpCOztBQUVBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osU0FBcEIsRUFBK0JJLENBQUMsRUFBaEMsRUFDRU4sT0FBTyxDQUFDTSxDQUFELENBQVAsR0FBYUMsSUFBSSxDQUFDQyxHQUFMLENBQVNULElBQUksQ0FBQ08sQ0FBRCxDQUFiLEVBQWtCZixRQUFsQixDQUFiOztBQUVGLFdBQU9TLE9BQVA7QUFDRDtBQUVEOzs7QUFDQVMsRUFBQUEsYUFBYSxDQUFDUixLQUFELEVBQVE7QUFDbkIsU0FBS0gsV0FBTCxDQUFpQkcsS0FBSyxDQUFDRixJQUF2QjtBQUNEOztBQUVEVyxFQUFBQSxXQUFXLENBQUNYLElBQUQsRUFBTztBQUNoQixVQUFNQyxPQUFPLEdBQUcsS0FBS0MsS0FBTCxDQUFXRixJQUEzQjtBQUNBLFVBQU1HLFNBQVMsR0FBRyxLQUFLQyxZQUFMLENBQWtCRCxTQUFwQztBQUNBLFVBQU1YLFFBQVEsR0FBRyxLQUFLYSxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsVUFBaEIsQ0FBakI7O0FBRUEsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixTQUFwQixFQUErQkksQ0FBQyxFQUFoQyxFQUNFTixPQUFPLENBQUNNLENBQUQsQ0FBUCxHQUFhQyxJQUFJLENBQUNDLEdBQUwsQ0FBU1QsSUFBSSxDQUFDTyxDQUFELENBQWIsRUFBa0JmLFFBQWxCLENBQWI7O0FBRUYsV0FBT1MsT0FBUDtBQUNEO0FBRUQ7OztBQUNBVyxFQUFBQSxhQUFhLENBQUNWLEtBQUQsRUFBUTtBQUNuQixTQUFLUyxXQUFMLENBQWlCVCxLQUFLLENBQUNGLElBQXZCO0FBQ0Q7O0FBbkN5Qjs7ZUFzQ2JMLEsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZUxmbyBmcm9tICcuL0Jhc2VMZm8uanMnO1xuXG5jb25zdCBkZWZpbml0aW9ucyA9IHtcbiAgZXhwb25lbnQ6IHtcbiAgICB0eXBlOiAnZmxvYXQnLFxuICAgIGRlZmF1bHQ6IDEsXG4gIH0sXG59O1xuXG4vKipcbiAqIEFwcGx5IGFuIGV4cG9uYW50IHBvd2VyIHRvIHRoZSBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZSBkZWZhdWx0IHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBleHBvbmVudCAtIEV4cG9uZW50XG4gKi9cbmNsYXNzIFBvd2VyIGV4dGVuZHMgQmFzZUxmbyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihkZWZpbml0aW9ucywgb3B0aW9ucyk7XG4gIH1cblxuICBpbnB1dFZlY3RvcihkYXRhKSB7XG4gICAgY29uc3Qgb3V0RGF0YSA9IHRoaXMuZnJhbWUuZGF0YTtcbiAgICBjb25zdCBmcmFtZVNpemUgPSB0aGlzLnN0cmVhbVBhcmFtcy5mcmFtZVNpemU7XG4gICAgY29uc3QgZXhwb25lbnQgPSB0aGlzLnBhcmFtcy5nZXQoJ2V4cG9uZW50Jyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lU2l6ZTsgaSsrKVxuICAgICAgb3V0RGF0YVtpXSA9IE1hdGgucG93KGRhdGFbaV0sIGV4cG9uZW50KTtcblxuICAgIHJldHVybiBvdXREYXRhO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHByb2Nlc3NWZWN0b3IoZnJhbWUpIHtcbiAgICB0aGlzLmlucHV0VmVjdG9yKGZyYW1lLmRhdGEpO1xuICB9XG5cbiAgaW5wdXRTaWduYWwoZGF0YSkge1xuICAgIGNvbnN0IG91dERhdGEgPSB0aGlzLmZyYW1lLmRhdGE7XG4gICAgY29uc3QgZnJhbWVTaXplID0gdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplO1xuICAgIGNvbnN0IGV4cG9uZW50ID0gdGhpcy5wYXJhbXMuZ2V0KCdleHBvbmVudCcpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVNpemU7IGkrKylcbiAgICAgIG91dERhdGFbaV0gPSBNYXRoLnBvdyhkYXRhW2ldLCBleHBvbmVudCk7XG5cbiAgICByZXR1cm4gb3V0RGF0YTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBwcm9jZXNzU2lnbmFsKGZyYW1lKSB7XG4gICAgdGhpcy5pbnB1dFNpZ25hbChmcmFtZS5kYXRhKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQb3dlcjtcbiJdfQ==