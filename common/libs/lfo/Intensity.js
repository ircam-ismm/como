"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseLfo = _interopRequireDefault(require("./BaseLfo.js"));

var _Delta = _interopRequireDefault(require("./Delta.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const definitions = {
  feedback: {
    type: 'float',
    default: 0.7,
    min: 0,
    max: 1
  },
  gain: {
    type: 'float',
    default: 0.07,
    min: 0
  }
};
const inverseGravity = 1 / 9.81;
const abs = Math.abs;
const min = Math.min;
const max = Math.max;
const pow = Math.pow;
/**
 * Compute the intensity of the accelerometers.
 *
 * input: an array of numbers of size 1 to 3 (`[x]`, `[x, y]` or `[x, y, z]`).
 * output: `[normIntensity, xIntensity, yIntensity, zIntensity]`
 *
 * @memberof operator
 *
 * @param {Object} [options] - Override default options.
 * @param {Number} [options.feedback=0.7] - Feedback coefficient.
 * @param {Number} [options.gain=0.07] - Post gain coefficient.
 */

class Intensity extends _BaseLfo.default {
  constructor(options = {}) {
    super(definitions, options);
    this.memory = null;
    this.normAcc = null;
    this.delta = new _Delta.default({
      size: 3,
      useFrameRate: 1
    });
  }
  /** @private */


  processStreamParams(prevStreamParams = {}) {
    this.prepareStreamParams(prevStreamParams);
    this.streamParams.frameSize = 4;
    this.streamParams.description = ['norm', 'x', 'y', 'z'];
    this.delta.processStreamParams({
      frameSize: 3,
      frameRate: this.streamParams.frameRate
    });
    this.memory = new Float32Array(3);
    this.normAcc = new Float32Array(3);
    this.propagateStreamParams();
  }

  resetStream() {
    super.resetStream();
    this.delta.resetStream();

    for (let i = 0; i < 3; i++) this.memory[i] = 0;
  }

  inputVector(data) {
    const outData = this.frame.data;
    const buffer = this.buffer;
    const memory = this.memory;
    const normAcc = this.normAcc;
    const feedback = this.params.get('feedback');
    const gain = this.params.get('gain');
    let norm = 0; // normalize accelerometers

    for (let i = 0; i < this.streamParams.frameSize; i++) normAcc[i] = (data[i] || 0) * inverseGravity;

    const deltas = this.delta.inputVector(normAcc);

    for (let i = 0; i < 3; i++) {
      let value = abs(deltas[i]);
      value = value + feedback * memory[i]; // store value for next pass

      memory[i] = value;
      value = value * gain;
      value = value * value;
      norm += value;
      outData[i + 1] = value;
    }

    outData[0] = norm;
    return outData;
  }

  processVector(frame) {
    this.frame.data = this.inputVector(frame.data);
  }

}

var _default = Intensity;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tb24vbGlicy9sZm8vSW50ZW5zaXR5LmpzIl0sIm5hbWVzIjpbImRlZmluaXRpb25zIiwiZmVlZGJhY2siLCJ0eXBlIiwiZGVmYXVsdCIsIm1pbiIsIm1heCIsImdhaW4iLCJpbnZlcnNlR3Jhdml0eSIsImFicyIsIk1hdGgiLCJwb3ciLCJJbnRlbnNpdHkiLCJCYXNlTGZvIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwibWVtb3J5Iiwibm9ybUFjYyIsImRlbHRhIiwiRGVsdGEiLCJzaXplIiwidXNlRnJhbWVSYXRlIiwicHJvY2Vzc1N0cmVhbVBhcmFtcyIsInByZXZTdHJlYW1QYXJhbXMiLCJwcmVwYXJlU3RyZWFtUGFyYW1zIiwic3RyZWFtUGFyYW1zIiwiZnJhbWVTaXplIiwiZGVzY3JpcHRpb24iLCJmcmFtZVJhdGUiLCJGbG9hdDMyQXJyYXkiLCJwcm9wYWdhdGVTdHJlYW1QYXJhbXMiLCJyZXNldFN0cmVhbSIsImkiLCJpbnB1dFZlY3RvciIsImRhdGEiLCJvdXREYXRhIiwiZnJhbWUiLCJidWZmZXIiLCJwYXJhbXMiLCJnZXQiLCJub3JtIiwiZGVsdGFzIiwidmFsdWUiLCJwcm9jZXNzVmVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxXQUFXLEdBQUc7QUFDbEJDLEVBQUFBLFFBQVEsRUFBRTtBQUNSQyxJQUFBQSxJQUFJLEVBQUUsT0FERTtBQUVSQyxJQUFBQSxPQUFPLEVBQUUsR0FGRDtBQUdSQyxJQUFBQSxHQUFHLEVBQUUsQ0FIRztBQUlSQyxJQUFBQSxHQUFHLEVBQUU7QUFKRyxHQURRO0FBT2xCQyxFQUFBQSxJQUFJLEVBQUU7QUFDSkosSUFBQUEsSUFBSSxFQUFFLE9BREY7QUFFSkMsSUFBQUEsT0FBTyxFQUFFLElBRkw7QUFHSkMsSUFBQUEsR0FBRyxFQUFFO0FBSEQ7QUFQWSxDQUFwQjtBQWNBLE1BQU1HLGNBQWMsR0FBRyxJQUFJLElBQTNCO0FBQ0EsTUFB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QUFHLENBQUNnQyxNQUFNLENBQUNULENBQUQsQ0FBUCxDQUFmO0FBQ0FVLE1BQUFBLEtBQUssR0FBR0EsS0FBSyxHQUFHeEMsUUFBUSxHQUFHYyxNQUFNLENBQUNnQixDQUFELENBQWpDLENBRjBCLENBSTFCOztBQUNBaEIsTUFBQUEsTUFBTSxDQUFDZ0IsQ0FBRCxDQUFOLEdBQVlVLEtBQVo7QUFFQUEsTUFBQUEsS0FBSyxHQUFHQSxLQUFLLEdBQUduQyxJQUFoQjtBQUNBbUMsTUFBQUEsS0FBSyxHQUFHQSxLQUFLLEdBQUdBLEtBQWhCO0FBRUFGLE1BQUFBLElBQUksSUFBSUUsS0FBUjtBQUNBUCxNQUFBQSxPQUFPLENBQUNILENBQUMsR0FBRyxDQUFMLENBQVAsR0FBaUJVLEtBQWpCO0FBQ0Q7O0FBRURQLElBQUFBLE9BQU8sQ0FBQyxDQUFELENBQVAsR0FBYUssSUFBYjtBQUVBLFdBQU9MLE9BQVA7QUFDRDs7QUFFRFEsRUFBQUEsYUFBYSxDQUFDUCxLQUFELEVBQVE7QUFDbkIsU0FBS0EsS0FBTCxDQUFXRixJQUFYLEdBQWtCLEtBQUtELFdBQUwsQ0FBaUJHLEtBQUssQ0FBQ0YsSUFBdkIsQ0FBbEI7QUFDRDs7QUE3RTZCOztlQWdGakJ0QixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VMZm8gZnJvbSAnLi9CYXNlTGZvLmpzJztcbmltcG9ydCBEZWx0YSBmcm9tICcuL0RlbHRhLmpzJztcblxuY29uc3QgZGVmaW5pdGlvbnMgPSB7XG4gIGZlZWRiYWNrOiB7XG4gICAgdHlwZTogJ2Zsb2F0JyxcbiAgICBkZWZhdWx0OiAwLjcsXG4gICAgbWluOiAwLFxuICAgIG1heDogMSxcbiAgfSxcbiAgZ2Fpbjoge1xuICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgZGVmYXVsdDogMC4wNyxcbiAgICBtaW46IDAsXG4gIH0sXG59O1xuXG5jb25zdCBpbnZlcnNlR3Jhdml0eSA9IDEgLyA5LjgxO1xuY29uc3QgYWJzID0gTWF0aC5hYnM7XG5jb25zdCBtaW4gPSBNYXRoLm1pbjtcbmNvbnN0IG1heCA9IE1hdGgubWF4O1xuY29uc3QgcG93ID0gTWF0aC5wb3c7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgaW50ZW5zaXR5IG9mIHRoZSBhY2NlbGVyb21ldGVycy5cbiAqXG4gKiBpbnB1dDogYW4gYXJyYXkgb2YgbnVtYmVycyBvZiBzaXplIDEgdG8gMyAoYFt4XWAsIGBbeCwgeV1gIG9yIGBbeCwgeSwgel1gKS5cbiAqIG91dHB1dDogYFtub3JtSW50ZW5zaXR5LCB4SW50ZW5zaXR5LCB5SW50ZW5zaXR5LCB6SW50ZW5zaXR5XWBcbiAqXG4gKiBAbWVtYmVyb2Ygb3BlcmF0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gT3ZlcnJpZGUgZGVmYXVsdCBvcHRpb25zLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZlZWRiYWNrPTAuN10gLSBGZWVkYmFjayBjb2VmZmljaWVudC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5nYWluPTAuMDddIC0gUG9zdCBnYWluIGNvZWZmaWNpZW50LlxuICovXG5jbGFzcyBJbnRlbnNpdHkgZXh0ZW5kcyBCYXNlTGZvIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoZGVmaW5pdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5tZW1vcnkgPSBudWxsO1xuICAgIHRoaXMubm9ybUFjYyA9IG51bGw7XG4gICAgdGhpcy5kZWx0YSA9IG5ldyBEZWx0YSh7IHNpemU6IDMsIHVzZUZyYW1lUmF0ZTogMSB9KTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBwcm9jZXNzU3RyZWFtUGFyYW1zKHByZXZTdHJlYW1QYXJhbXMgPSB7fSkge1xuICAgIHRoaXMucHJlcGFyZVN0cmVhbVBhcmFtcyhwcmV2U3RyZWFtUGFyYW1zKTtcblxuICAgIHRoaXMuc3RyZWFtUGFyYW1zLmZyYW1lU2l6ZSA9IDQ7XG4gICAgdGhpcy5zdHJlYW1QYXJhbXMuZGVzY3JpcHRpb24gPSBbXG4gICAgICAnbm9ybScsXG4gICAgICAneCcsXG4gICAgICAneScsXG4gICAgICAneicsXG4gICAgXTtcblxuICAgIHRoaXMuZGVsdGEucHJvY2Vzc1N0cmVhbVBhcmFtcyh7XG4gICAgICBmcmFtZVNpemU6IDMsXG4gICAgICBmcmFtZVJhdGU6IHRoaXMuc3RyZWFtUGFyYW1zLmZyYW1lUmF0ZSxcbiAgICB9KTtcblxuICAgIHRoaXMubWVtb3J5ID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICB0aGlzLm5vcm1BY2MgPSBuZXcgRmxvYXQzMkFycmF5KDMpO1xuXG4gICAgdGhpcy5wcm9wYWdhdGVTdHJlYW1QYXJhbXMoKTtcbiAgfVxuXG4gIHJlc2V0U3RyZWFtKCkge1xuICAgIHN1cGVyLnJlc2V0U3RyZWFtKCk7XG5cbiAgICB0aGlzLmRlbHRhLnJlc2V0U3RyZWFtKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKylcbiAgICAgIHRoaXMubWVtb3J5W2ldID0gMDtcbiAgfVxuXG4gIGlucHV0VmVjdG9yKGRhdGEpIHtcbiAgICBjb25zdCBvdXREYXRhID0gdGhpcy5mcmFtZS5kYXRhO1xuICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgIGNvbnN0IG1lbW9yeSA9IHRoaXMubWVtb3J5O1xuICAgIGNvbnN0IG5vcm1BY2MgPSB0aGlzLm5vcm1BY2M7XG4gICAgY29uc3QgZmVlZGJhY2sgPSB0aGlzLnBhcmFtcy5nZXQoJ2ZlZWRiYWNrJyk7XG4gICAgY29uc3QgZ2FpbiA9IHRoaXMucGFyYW1zLmdldCgnZ2FpbicpO1xuICAgIGxldCBub3JtID0gMDtcblxuICAgIC8vIG5vcm1hbGl6ZSBhY2NlbGVyb21ldGVyc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplOyBpKyspXG4gICAgICBub3JtQWNjW2ldID0gKGRhdGFbaV0gfHwgMCkgKiBpbnZlcnNlR3Jhdml0eTtcblxuICAgIGNvbnN0IGRlbHRhcyA9IHRoaXMuZGVsdGEuaW5wdXRWZWN0b3Iobm9ybUFjYyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgbGV0IHZhbHVlID0gYWJzKGRlbHRhc1tpXSk7XG4gICAgICB2YWx1ZSA9IHZhbHVlICsgZmVlZGJhY2sgKiBtZW1vcnlbaV07XG5cbiAgICAgIC8vIHN0b3JlIHZhbHVlIGZvciBuZXh0IHBhc3NcbiAgICAgIG1lbW9yeVtpXSA9IHZhbHVlO1xuXG4gICAgICB2YWx1ZSA9IHZhbHVlICogZ2FpbjtcbiAgICAgIHZhbHVlID0gdmFsdWUgKiB2YWx1ZTtcblxuICAgICAgbm9ybSArPSB2YWx1ZTtcbiAgICAgIG91dERhdGFbaSArIDFdID0gdmFsdWU7XG4gICAgfVxuXG4gICAgb3V0RGF0YVswXSA9IG5vcm07XG5cbiAgICByZXR1cm4gb3V0RGF0YTtcbiAgfVxuXG4gIHByb2Nlc3NWZWN0b3IoZnJhbWUpIHtcbiAgICB0aGlzLmZyYW1lLmRhdGEgPSB0aGlzLmlucHV0VmVjdG9yKGZyYW1lLmRhdGEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVuc2l0eTtcbiJdfQ==