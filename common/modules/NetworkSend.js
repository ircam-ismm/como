"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseModule = _interopRequireDefault(require("./BaseModule"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NetworkSend extends _BaseModule.default {
  constructor(graph, type, id, options) {
    super(graph, type, id, options);
    this.data = new Float32Array(9);
    this.streamSource = false;
    this.unsubscribe = this.graph.player.subscribe(updates => {
      if ('streamSource' in updates) {
        this.streamSource = updates['streamSource'];
      }
    }); // init with current stream value

    this.streamSource = this.graph.player.get('streamSource');
  }

  destroy() {
    this.unsubscribe();
  } // override process and not execute to make sure they is no further node
  // this is a deadend


  process(frame) {
    if (this.streamSource) {
      // how to generalize that (automatic binary codec) ?
      this.data[0] = frame.data.metas.id;
      this.data[1] = frame.data.metas.time;
      this.data[2] = frame.data.metas.period;
      this.data[3] = frame.data.accelerationIncludingGravity.x;
      this.data[4] = frame.data.accelerationIncludingGravity.y;
      this.data[5] = frame.data.accelerationIncludingGravity.z;
      this.data[6] = frame.data.rotationRate.alpha;
      this.data[7] = frame.data.rotationRate.beta;
      this.data[8] = frame.data.rotationRate.gamma;
      this.graph.como.project.propagateStreamFrame(this.data);
    }
  }

}

var _default = NetworkSend;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vbW9kdWxlcy9OZXR3b3JrU2VuZC5qcyJdLCJuYW1lcyI6WyJOZXR3b3JrU2VuZCIsIkJhc2VNb2R1bGUiLCJjb25zdHJ1Y3RvciIsImdyYXBoIiwidHlwZSIsImlkIiwib3B0aW9ucyIsImRhdGEiLCJGbG9hdDMyQXJyYXkiLCJzdHJlYW1Tb3VyY2UiLCJ1bnN1YnNjcmliZSIsInBsYXllciIsInN1YnNjcmliZSIsInVwZGF0ZXMiLCJnZXQiLCJkZXN0cm95IiwicHJvY2VzcyIsImZyYW1lIiwibWV0YXMiLCJ0aW1lIiwicGVyaW9kIiwiYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eSIsIngiLCJ5IiwieiIsInJvdGF0aW9uUmF0ZSIsImFscGhhIiwiYmV0YSIsImdhbW1hIiwiY29tbyIsInByb2plY3QiLCJwcm9wYWdhdGVTdHJlYW1GcmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsTUFBTUEsV0FBTixTQUEwQkMsbUJBQTFCLENBQXFDO0FBQ25DQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsSUFBUixFQUFjQyxFQUFkLEVBQWtCQyxPQUFsQixFQUEyQjtBQUNwQyxVQUFNSCxLQUFOLEVBQWFDLElBQWIsRUFBbUJDLEVBQW5CLEVBQXVCQyxPQUF2QjtBQUVBLFNBQUtDLElBQUwsR0FBWSxJQUFJQyxZQUFKLENBQWlCLENBQWpCLENBQVo7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEtBQXBCO0FBRUEsU0FBS0MsV0FBTCxHQUFtQixLQUFLUCxLQUFMLENBQVdRLE1BQVgsQ0FBa0JDLFNBQWxCLENBQTRCQyxPQUFPLElBQUk7QUFDeEQsVUFBSSxrQkFBa0JBLE9BQXRCLEVBQStCO0FBQzdCLGFBQUtKLFlBQUwsR0FBb0JJLE9BQU8sQ0FBQyxjQUFELENBQTNCO0FBQ0Q7QUFDRixLQUprQixDQUFuQixDQU5vQyxDQVlwQzs7QUFDQSxTQUFLSixZQUFMLEdBQW9CLEtBQUtOLEtBQUwsQ0FBV1EsTUFBWCxDQUFrQkcsR0FBbEIsQ0FBc0IsY0FBdEIsQ0FBcEI7QUFDRDs7QUFFREMsRUFBQUEsT0FBTyxHQUFHO0FBQ1IsU0FBS0wsV0FBTDtBQUNELEdBbkJrQyxDQXFCbkM7QUFDQTs7O0FBQ0FNLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBRCxFQUFRO0FBQ2IsUUFBSSxLQUFLUixZQUFULEVBQXVCO0FBQ3JCO0FBQ0EsV0FBS0YsSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdXLEtBQVgsQ0FBaUJiLEVBQWhDO0FBQ0EsV0FBS0UsSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdXLEtBQVgsQ0FBaUJDLElBQWhDO0FBQ0EsV0FBS1osSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdXLEtBQVgsQ0FBaUJFLE1BQWhDO0FBRUEsV0FBS2IsSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdjLDRCQUFYLENBQXdDQyxDQUF2RDtBQUNBLFdBQUtmLElBQUwsQ0FBVSxDQUFWLElBQWVVLEtBQUssQ0FBQ1YsSUFBTixDQUFXYyw0QkFBWCxDQUF3Q0UsQ0FBdkQ7QUFDQSxXQUFLaEIsSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdjLDRCQUFYLENBQXdDRyxDQUF2RDtBQUVBLFdBQUtqQixJQUFMLENBQVUsQ0FBVixJQUFlVSxLQUFLLENBQUNWLElBQU4sQ0FBV2tCLFlBQVgsQ0FBd0JDLEtBQXZDO0FBQ0EsV0FBS25CLElBQUwsQ0FBVSxDQUFWLElBQWVVLEtBQUssQ0FBQ1YsSUFBTixDQUFXa0IsWUFBWCxDQUF3QkUsSUFBdkM7QUFDQSxXQUFLcEIsSUFBTCxDQUFVLENBQVYsSUFBZVUsS0FBSyxDQUFDVixJQUFOLENBQVdrQixZQUFYLENBQXdCRyxLQUF2QztBQUVBLFdBQUt6QixLQUFMLENBQVcwQixJQUFYLENBQWdCQyxPQUFoQixDQUF3QkMsb0JBQXhCLENBQTZDLEtBQUt4QixJQUFsRDtBQUNEO0FBQ0Y7O0FBeENrQzs7ZUEyQ3RCUCxXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VNb2R1bGUgZnJvbSAnLi9CYXNlTW9kdWxlJztcblxuY2xhc3MgTmV0d29ya1NlbmQgZXh0ZW5kcyBCYXNlTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoZ3JhcGgsIHR5cGUsIGlkLCBvcHRpb25zKSB7XG4gICAgc3VwZXIoZ3JhcGgsIHR5cGUsIGlkLCBvcHRpb25zKTtcblxuICAgIHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoOSk7XG4gICAgdGhpcy5zdHJlYW1Tb3VyY2UgPSBmYWxzZTtcblxuICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLmdyYXBoLnBsYXllci5zdWJzY3JpYmUodXBkYXRlcyA9PiB7XG4gICAgICBpZiAoJ3N0cmVhbVNvdXJjZScgaW4gdXBkYXRlcykge1xuICAgICAgICB0aGlzLnN0cmVhbVNvdXJjZSA9IHVwZGF0ZXNbJ3N0cmVhbVNvdXJjZSddO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gaW5pdCB3aXRoIGN1cnJlbnQgc3RyZWFtIHZhbHVlXG4gICAgdGhpcy5zdHJlYW1Tb3VyY2UgPSB0aGlzLmdyYXBoLnBsYXllci5nZXQoJ3N0cmVhbVNvdXJjZScpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICAvLyBvdmVycmlkZSBwcm9jZXNzIGFuZCBub3QgZXhlY3V0ZSB0byBtYWtlIHN1cmUgdGhleSBpcyBubyBmdXJ0aGVyIG5vZGVcbiAgLy8gdGhpcyBpcyBhIGRlYWRlbmRcbiAgcHJvY2VzcyhmcmFtZSkge1xuICAgIGlmICh0aGlzLnN0cmVhbVNvdXJjZSkge1xuICAgICAgLy8gaG93IHRvIGdlbmVyYWxpemUgdGhhdCAoYXV0b21hdGljIGJpbmFyeSBjb2RlYykgP1xuICAgICAgdGhpcy5kYXRhWzBdID0gZnJhbWUuZGF0YS5tZXRhcy5pZDtcbiAgICAgIHRoaXMuZGF0YVsxXSA9IGZyYW1lLmRhdGEubWV0YXMudGltZTtcbiAgICAgIHRoaXMuZGF0YVsyXSA9IGZyYW1lLmRhdGEubWV0YXMucGVyaW9kO1xuXG4gICAgICB0aGlzLmRhdGFbM10gPSBmcmFtZS5kYXRhLmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueDtcbiAgICAgIHRoaXMuZGF0YVs0XSA9IGZyYW1lLmRhdGEuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS55O1xuICAgICAgdGhpcy5kYXRhWzVdID0gZnJhbWUuZGF0YS5hY2NlbGVyYXRpb25JbmNsdWRpbmdHcmF2aXR5Lno7XG5cbiAgICAgIHRoaXMuZGF0YVs2XSA9IGZyYW1lLmRhdGEucm90YXRpb25SYXRlLmFscGhhO1xuICAgICAgdGhpcy5kYXRhWzddID0gZnJhbWUuZGF0YS5yb3RhdGlvblJhdGUuYmV0YTtcbiAgICAgIHRoaXMuZGF0YVs4XSA9IGZyYW1lLmRhdGEucm90YXRpb25SYXRlLmdhbW1hO1xuXG4gICAgICB0aGlzLmdyYXBoLmNvbW8ucHJvamVjdC5wcm9wYWdhdGVTdHJlYW1GcmFtZSh0aGlzLmRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXR3b3JrU2VuZDtcbiJdfQ==