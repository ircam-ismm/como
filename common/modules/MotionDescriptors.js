"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _BaseModule = _interopRequireDefault(require("./BaseModule.js"));

var _Intensity = _interopRequireDefault(require("../libs/lfo/Intensity"));

var _Orientation = _interopRequireDefault(require("../libs/lfo/Orientation"));

var _Select = _interopRequireDefault(require("../libs/lfo/Select"));

var _EventIn = _interopRequireDefault(require("../libs/lfo/EventIn"));

var _Clip = _interopRequireDefault(require("../libs/lfo/Clip"));

var _Power = _interopRequireDefault(require("../libs/lfo/Power"));

var _Scale = _interopRequireDefault(require("../libs/lfo/Scale"));

var _Multiplier = _interopRequireDefault(require("../libs/lfo/Multiplier"));

var _Biquad = _interopRequireDefault(require("../libs/lfo/Biquad"));

var _Merger = _interopRequireDefault(require("../libs/lfo/Merger"));

var _Bridge = _interopRequireDefault(require("../libs/lfo/Bridge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// @note - should be replaced at some point

/**
 * @input - Stream[9]
 *   [id, time, period, accX, accY, accZ, gyroAlpha, gyroBeta, gyroGamma]
 * @output - Stream[11] [
 *   intensity
 *   enhancedIntensity
 *   orientation
 *   scaled gyro (deg / ms)
 * ]
 */
class MotionDescriptors extends _BaseModule.default {
  constructor(graph, type, id, options) {
    options = Object.assign({
      resamplingPeriod: 0.02
    }, options);
    super(graph, type, id, options); // @todo - review intensity naming

    this.outputFrame.data.intensity = {
      linear: 0,
      compressed: 0
    };
    this.outputFrame.data.accelerationBandpass5hz = {
      x: 0,
      y: 0,
      z: 0
    };
    this.outputFrame.data.orientation = {
      x: 0,
      y: 0,
      z: 0
    };
    this.outputFrame.data.rotationRateMs = {
      alpha: 0,
      beta: 0,
      gamma: 0
    };
    this.propagate = this.propagate.bind(this);
    this.eventIn = new _EventIn.default({
      frameType: 'vector',
      frameSize: 9,
      frameRate: 1 / this.options.resamplingPeriod
    });
    this.accGyroSelect = new _Select.default({
      indexes: [0, 1, 2, 3, 4, 5]
    });
    this.accSelect = new _Select.default({
      indexes: [0, 1, 2]
    });
    this.gyroSelect = new _Select.default({
      indexes: [3, 4, 5]
    }); // intensity

    this.intensity = new _Intensity.default({
      feedback: 0.7,
      gain: 0.07
    });
    this.intensityNormSelect = new _Select.default({
      index: 0
    }); // boost

    this.intensityClip = new _Clip.default({
      min: 0,
      max: 1
    });
    this.intensityPower = new _Power.default({
      exponent: 0.25
    });
    this.powerClip = new _Clip.default({
      min: 0.15,
      max: 1
    });
    this.powerScale = new _Scale.default({
      inputMin: 0.15,
      inputMax: 1,
      outputMin: 0,
      outputMax: 1
    }); // bandpass

    this.normalizeAcc = new _Multiplier.default({
      factor: 1 / 9.81
    });
    this.bandpass = new _Biquad.default({
      type: 'bandpass',
      q: 1,
      f0: 5
    });
    this.bandpassGain = new _Multiplier.default({
      factor: 1
    }); // orientation filter

    this.orientation = new _Orientation.default(); // gyroscopes scaling

    this.gyroScale = new _Multiplier.default({
      factor: [1 / 1000, 1 / 1000, 1 / 1000]
    }); // merge and output

    this.merger = new _Merger.default({
      frameSizes: [1, 1, 3, 3, 3]
    });
    this.bridge = new _Bridge.default({
      processFrame: this.propagate,
      finalizeStream: this.propagate
    }); // intensity and bandpass

    this.eventIn.connect(this.accSelect); // intensity branch

    this.accSelect.connect(this.intensity);
    this.intensity.connect(this.intensityNormSelect);
    this.intensityNormSelect.connect(this.merger); // boost branch

    this.intensityNormSelect.connect(this.intensityClip);
    this.intensityClip.connect(this.intensityPower);
    this.intensityPower.connect(this.powerClip);
    this.powerClip.connect(this.powerScale);
    this.powerScale.connect(this.merger); // biquad branch

    this.accSelect.connect(this.normalizeAcc);
    this.normalizeAcc.connect(this.bandpass);
    this.bandpass.connect(this.bandpassGain);
    this.bandpassGain.connect(this.merger); // orientation

    this.eventIn.connect(this.accGyroSelect);
    this.accGyroSelect.connect(this.orientation);
    this.orientation.connect(this.merger); // gyroscpes

    this.eventIn.connect(this.gyroSelect);
    this.gyroSelect.connect(this.gyroScale);
    this.gyroScale.connect(this.merger);
    this.merger.connect(this.bridge);
  }

  async init() {
    await this.eventIn.init();
    await this.eventIn.start();
  }

  process(inputFrame) {
    // create a valid lfo frame
    const lfoFrame = {
      time: inputFrame.data.metas.time,
      data: []
    };
    lfoFrame.data[0] = inputFrame.data.accelerationIncludingGravity.x;
    lfoFrame.data[1] = inputFrame.data.accelerationIncludingGravity.y;
    lfoFrame.data[2] = inputFrame.data.accelerationIncludingGravity.z;
    lfoFrame.data[3] = inputFrame.data.rotationRate.alpha;
    lfoFrame.data[4] = inputFrame.data.rotationRate.beta;
    lfoFrame.data[5] = inputFrame.data.rotationRate.gamma; // pipe to lfo graph

    this.eventIn.processFrame(lfoFrame);
  }

  propagate(lfoFrame) {
    this.outputFrame.data.intensity.linear = lfoFrame.data[0];
    this.outputFrame.data.intensity.compressed = lfoFrame.data[1];
    this.outputFrame.data.accelerationBandpass5hz.x = lfoFrame.data[2];
    this.outputFrame.data.accelerationBandpass5hz.y = lfoFrame.data[3];
    this.outputFrame.data.accelerationBandpass5hz.z = lfoFrame.data[4];
    this.outputFrame.data.orientation.x = lfoFrame.data[5];
    this.outputFrame.data.orientation.y = lfoFrame.data[6];
    this.outputFrame.data.orientation.z = lfoFrame.data[7];
    this.outputFrame.data.rotationRateMs.alpha = lfoFrame.data[8];
    this.outputFrame.data.rotationRateMs.beta = lfoFrame.data[9];
    this.outputFrame.data.rotationRateMs.gamma = lfoFrame.data[10];
    super.propagate(this.outputFrame);
  }

}

var _default = MotionDescriptors;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,